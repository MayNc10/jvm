   Compiling rust-jvm v0.1.0 (/home/may/rust-jvm)
error[E0425]: cannot find value `val` in this scope
   --> src/value.rs:195:15
    |
195 |         match val {
    |               ^^^ not found in this scope

error[E0603]: struct import `MethodInfo` is private
  --> src/jvm.rs:5:27
   |
5  | use crate::class::{Class, MethodInfo};
   |                           ^^^^^^^^^^ private struct import
   |
note: the struct import `MethodInfo` is defined here...
  --> src/class.rs:5:23
   |
5  | use self::classfile::{MethodInfo, ClassFile};
   |                       ^^^^^^^^^^
note: ...and refers to the struct `MethodInfo` which is defined here
  --> src/class/classfile.rs:39:1
   |
39 | pub struct MethodInfo {
   | ^^^^^^^^^^^^^^^^^^^^^ consider importing it directly

warning: unused import: `class`
 --> src/jvm.rs:2:28
  |
2 | use crate::{access_macros, class};
  |                            ^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `crate::attributes::code::Exception`
 --> src/jvm.rs:3:5
  |
3 | use crate::attributes::code::Exception;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::constant_pool::Entry`
 --> src/jvm.rs:6:5
  |
6 | use crate::constant_pool::Entry;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `array`
 --> src/jvm.rs:8:44
  |
8 | use crate::reference::{Reference, Monitor, array};
  |                                            ^^^^^

warning: unused import: `std::cell::Ref`
 --> src/jvm/operations.rs:1:5
  |
1 | use std::cell::Ref;
  |     ^^^^^^^^^^^^^^

warning: unused import: `self`
 --> src/jvm/operations.rs:5:27
  |
5 | use crate::class::{Class, self};
  |                           ^^^^

warning: unused import: `ReferenceKind`
 --> src/jvm/operations.rs:6:35
  |
6 | use crate::constant_pool::{Entry, ReferenceKind};
  |                                   ^^^^^^^^^^^^^

warning: unused import: `object`
 --> src/jvm/operations.rs:8:44
  |
8 | use crate::reference::{Reference, Monitor, object};
  |                                            ^^^^^^

warning: unused import: `self`
 --> src/jvm/instructions.rs:4:27
  |
4 | use crate::class::{Class, self};
  |                           ^^^^

warning: unused imports: `Entry`, `ReferenceKind`
 --> src/jvm/instructions.rs:5:28
  |
5 | use crate::constant_pool::{Entry, ReferenceKind};
  |                            ^^^^^  ^^^^^^^^^^^^^

warning: unused import: `Opcode`
 --> src/jvm/instructions.rs:6:32
  |
6 | use crate::errorcodes::{Error, Opcode};
  |                                ^^^^^^

warning: unused import: `object`
 --> src/jvm/instructions.rs:7:44
  |
7 | use crate::reference::{Reference, Monitor, object};
  |                                            ^^^^^^

warning: unused import: `VarValue`
  --> src/jvm/instructions.rs:10:27
   |
10 | use crate::value::{Value, VarValue};
   |                           ^^^^^^^^

warning: unused import: `std::collections::HashMap`
 --> src/class/classfile.rs:1:5
  |
1 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `NameAndType`
  --> src/class/classfile.rs:13:107
   |
13 | use crate::constant_pool::{Entry, NameAndTypeInfo, RefInfo, MethodHandleInfo, ReferenceKind, DynamicInfo, NameAndType};
   |                                                                                                           ^^^^^^^^^^^

warning: unused import: `crate::reference::Reference`
  --> src/class/classfile.rs:14:5
   |
14 | use crate::reference::Reference;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `access_macros`
  --> src/class/classfile.rs:15:29
   |
15 | use crate::{data_access::*, access_macros};
   |                             ^^^^^^^^^^^^^

warning: unused import: `crate::jvm::JVM`
  --> src/class/classfile.rs:18:5
   |
18 | use crate::jvm::JVM;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `crate::value::Value`
  --> src/class/classfile.rs:19:5
   |
19 | use crate::value::Value;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `self`
 --> src/class/customclass.rs:3:103
  |
3 | use crate::{constant_pool::{NameAndType, Entry}, value::Value, errorcodes::Opcode, flags, reference::{self, Reference}};
  |                                                                                                       ^^^^

warning: unused import: `std::str::EncodeUtf16`
  --> src/value.rs:12:5
   |
12 | use std::str::EncodeUtf16;
   |     ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::marker::PhantomData`
 --> src/reference/array.rs:1:5
  |
1 | use std::marker::PhantomData;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::access_macros`
 --> src/reference/object/customobject.rs:5:5
  |
5 | use crate::access_macros;
  |     ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::class::classfile::ClassFile`
 --> src/reference/object/customobject.rs:6:5
  |
6 | use crate::class::classfile::ClassFile;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `NameAndTypeInfo`
 --> src/reference/object/customobject.rs:8:28
  |
8 | use crate::constant_pool::{NameAndTypeInfo, NameAndType};
  |                            ^^^^^^^^^^^^^^^

warning: unused import: `thread::Thread`
 --> src/reference/object/natives/integer.rs:1:42
  |
1 | use crate::{access_macros, frame::Frame, thread::Thread, errorcodes::Opcode, class::customclass::CustomClass};
  |                                          ^^^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
  --> src/reference.rs:11:5
   |
11 | use std::collections::HashMap;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0049]: method `exec_method` has 1 type parameter but its trait declaration has 0 type parameters
   --> src/class/customclass.rs:112:20
    |
112 |     fn exec_method<C: Class>(&mut self, current_method_class: Rc<C>, jvm: &mut JVM, method: &MethodInfo) -> Result<bool, Error> {
    |                    ^ found 1 type parameter
    |
   ::: src/class.rs:14:19
    |
14  |     fn exec_method(&mut self, current_method_class: Rc<dyn Class>, jvm: &mut JVM, method: &MethodInfo) -> Result<bool, Error>; // Figure ...
    |                   - expected 0 type parameters

error[E0049]: method `new` has 1 type parameter but its trait declaration has 0 type parameters
  --> src/reference/object/customobject.rs:21:12
   |
21 |     fn new<CC: Class>(current_method_class: Rc<CC>, class_index: u16, jvm: &mut JVM) -> Result<CustomObject<C>, Error> {
   |            ^^ found 1 type parameter
   |
  ::: src/reference/object.rs:13:11
   |
13 |     fn new(current_method_class: Rc<dyn Class>, class_index: u16, jvm: &mut JVM) -> Result<Self, Error> where Self: Sized;
   |           - expected 0 type parameters

error[E0053]: method `new_with_name` has an incompatible type for trait
  --> src/reference/object/customobject.rs:61:52
   |
20 | impl<C: Class + ?Sized> Object for CustomObject<C> {
   |      - this type parameter
...
61 |     fn new_with_name(name: &str, jvm: &mut JVM) -> Result<CustomObject<C>, Error> {
   |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |                                                    |
   |                                                    expected trait object `dyn class::Class`, found type parameter `C`
   |                                                    help: change the output type to match the trait: `Result<customobject::CustomObject<(dyn class::Class + 'static)>, errorcodes::Error>`
   |
note: type in trait
  --> src/reference/object.rs:15:52
   |
15 |     fn new_with_name(name: &str, jvm: &mut JVM) -> Result<CustomObject<dyn Class>, Error>  where Self : Sized {
   |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = note: expected fn pointer `fn(&str, &mut jvm::JVM) -> Result<customobject::CustomObject<(dyn class::Class + 'static)>, _>`
              found fn pointer `fn(&str, &mut jvm::JVM) -> Result<customobject::CustomObject<C>, _>`
   = help: type parameters must be constrained to match other types
   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters

error[E0049]: method `get_field` has 1 type parameter but its trait declaration has 0 type parameters
   --> src/reference/object/customobject.rs:105:18
    |
105 |     fn get_field<CC: Class>(&self, current_method_class: Rc<CC>, class_index: u16, jvm: &mut JVM) -> Result<Value<dyn Class, dyn Object>,...
    |                  ^^ found 1 type parameter
    |
   ::: src/reference/object.rs:21:17
    |
21  |     fn get_field(&self, current_method_class: Rc<dyn Class>, class_index: u16, jvm: &mut JVM) -> Result<Value<dyn Class, dyn Object>, Err...
    |                 - expected 0 type parameters

error[E0049]: method `put_field` has 1 type parameter but its trait declaration has 0 type parameters
   --> src/reference/object/customobject.rs:131:18
    |
131 |     fn put_field<CC: Class>(&mut self, current_method_class: Rc<CC>, class_index: u16, jvm: &mut JVM, value: Value<dyn Class, dyn Object>...
    |                  ^^ found 1 type parameter
    |
   ::: src/reference/object.rs:24:17
    |
24  |     fn put_field(&mut self, current_method_class: Rc<dyn Class>, class_index: u16, jvm: &mut JVM, value: Value<dyn Class, dyn Object>) ->...
    |                 - expected 0 type parameters

error[E0049]: method `exec_method` has 1 type parameter but its trait declaration has 0 type parameters
   --> src/reference/object/customobject.rs:151:20
    |
151 |     fn exec_method<CC: Class>(&mut self, current_method_class: Rc<CC>, jvm: &mut JVM, method: &MethodInfo) -> Result<bool, Error> {
    |                    ^^ found 1 type parameter
    |
   ::: src/reference/object.rs:26:19
    |
26  |     fn exec_method(&mut self, current_method_class: Rc<dyn Class>, jvm: &mut JVM, method: &MethodInfo) -> Result<bool, Error>; // Figure ...
    |                   - expected 0 type parameters

error[E0053]: method `class` has an incompatible type for trait
   --> src/reference/object/customobject.rs:154:24
    |
20  | impl<C: Class + ?Sized> Object for CustomObject<C> {
    |      - this type parameter
...
154 |     fn class(&self) -> Rc<C> {
    |                        ^^^^^
    |                        |
    |                        expected trait object `dyn class::Class`, found type parameter `C`
    |                        help: change the output type to match the trait: `std::rc::Rc<(dyn class::Class + 'static)>`
    |
note: type in trait
   --> src/reference/object.rs:28:24
    |
28  |     fn class(&self) -> Rc<dyn Class>;
    |                        ^^^^^^^^^^^^^
    = note: expected fn pointer `fn(&customobject::CustomObject<C>) -> std::rc::Rc<(dyn class::Class + 'static)>`
               found fn pointer `fn(&customobject::CustomObject<C>) -> std::rc::Rc<C>`
    = help: type parameters must be constrained to match other types
    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters

error[E0049]: method `new` has 1 type parameter but its trait declaration has 0 type parameters
  --> src/reference/object/natives/integer.rs:11:12
   |
11 |     fn new<C: Class>(current_method_class: Rc<C>, class_index: u16, jvm: &mut JVM) -> Result<Self, Error> where Self: Sized {
   |            ^ found 1 type parameter
   |
  ::: src/reference/object.rs:13:11
   |
13 |     fn new(current_method_class: Rc<dyn Class>, class_index: u16, jvm: &mut JVM) -> Result<Self, Error> where Self: Sized;
   |           - expected 0 type parameters

error[E0053]: method `new_with_name` has an incompatible type for trait
  --> src/reference/object/natives/integer.rs:14:52
   |
14 |     fn new_with_name(name: &str, jvm: &mut JVM) -> Result<Self, Error> where Self: Sized {
   |                                                    ^^^^^^^^^^^^^^^^^^^
   |                                                    |
   |                                                    expected struct `customobject::CustomObject`, found struct `Integer`
   |                                                    help: change the output type to match the trait: `Result<customobject::CustomObject<(dyn class::Class + 'static)>, errorcodes::Error>`
   |
note: type in trait
  --> src/reference/object.rs:15:52
   |
15 |     fn new_with_name(name: &str, jvm: &mut JVM) -> Result<CustomObject<dyn Class>, Error>  where Self : Sized {
   |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = note: expected fn pointer `fn(&str, &mut jvm::JVM) -> Result<customobject::CustomObject<(dyn class::Class + 'static)>, _>`
              found fn pointer `fn(&str, &mut jvm::JVM) -> Result<Integer, _>`

error[E0049]: method `get_field` has 1 type parameter but its trait declaration has 0 type parameters
  --> src/reference/object/natives/integer.rs:17:18
   |
17 |     fn get_field<C: Class>(&self, current_method_class: Rc<C>, class_index: u16, jvm: &mut JVM) -> Result<Value<dyn Class, dyn Object>, E...
   |                  ^ found 1 type parameter
   |
  ::: src/reference/object.rs:21:17
   |
21 |     fn get_field(&self, current_method_class: Rc<dyn Class>, class_index: u16, jvm: &mut JVM) -> Result<Value<dyn Class, dyn Object>, Err...
   |                 - expected 0 type parameters

error[E0049]: method `put_field` has 1 type parameter but its trait declaration has 0 type parameters
  --> src/reference/object/natives/integer.rs:20:18
   |
20 |     fn put_field<C: Class>(&mut self, current_method_class: Rc<C>, class_index: u16, jvm: &mut JVM, value: Value<dyn Class, dyn Object>) ...
   |                  ^ found 1 type parameter
   |
  ::: src/reference/object.rs:24:17
   |
24 |     fn put_field(&mut self, current_method_class: Rc<dyn Class>, class_index: u16, jvm: &mut JVM, value: Value<dyn Class, dyn Object>) ->...
   |                 - expected 0 type parameters

error[E0049]: method `exec_method` has 1 type parameter but its trait declaration has 0 type parameters
  --> src/reference/object/natives/integer.rs:23:20
   |
23 |     fn exec_method<C: Class>(&mut self, current_method_class: Rc<C>, jvm: &mut JVM, method: &MethodInfo) -> Result<bool, Error> {
   |                    ^ found 1 type parameter
   |
  ::: src/reference/object.rs:26:19
   |
26 |     fn exec_method(&mut self, current_method_class: Rc<dyn Class>, jvm: &mut JVM, method: &MethodInfo) -> Result<bool, Error>; // Figure ...
   |                   - expected 0 type parameters

error[E0049]: method `class` has 1 type parameter but its trait declaration has 0 type parameters
  --> src/reference/object/natives/integer.rs:55:14
   |
55 |     fn class<C: Class>(&self) -> Rc<C> {
   |              ^ found 1 type parameter
   |
  ::: src/reference/object.rs:28:13
   |
28 |     fn class(&self) -> Rc<dyn Class>;
   |             - expected 0 type parameters

error[E0049]: method `new` has 1 type parameter but its trait declaration has 0 type parameters
  --> src/reference/object/natives/string.rs:11:12
   |
11 |     fn new<C: Class>(current_method_class: Rc<C>, class_index: u16, jvm: &mut JVM) -> Result<Self, Error> where Self: Sized {
   |            ^ found 1 type parameter
   |
  ::: src/reference/object.rs:13:11
   |
13 |     fn new(current_method_class: Rc<dyn Class>, class_index: u16, jvm: &mut JVM) -> Result<Self, Error> where Self: Sized;
   |           - expected 0 type parameters

error[E0049]: method `get_field` has 1 type parameter but its trait declaration has 0 type parameters
  --> src/reference/object/natives/string.rs:17:18
   |
17 |     fn get_field<C: Class>(&self, current_method_class: Rc<C>, class_index: u16, jvm: &mut JVM) -> Result<Value<dyn Class, dyn Object>, E...
   |                  ^ found 1 type parameter
   |
  ::: src/reference/object.rs:21:17
   |
21 |     fn get_field(&self, current_method_class: Rc<dyn Class>, class_index: u16, jvm: &mut JVM) -> Result<Value<dyn Class, dyn Object>, Err...
   |                 - expected 0 type parameters

error[E0049]: method `put_field` has 1 type parameter but its trait declaration has 0 type parameters
  --> src/reference/object/natives/string.rs:20:18
   |
20 |     fn put_field<C: Class>(&mut self, current_method_class: Rc<C>, class_index: u16, jvm: &mut JVM, value: Value<dyn Class, dyn Object>) ...
   |                  ^ found 1 type parameter
   |
  ::: src/reference/object.rs:24:17
   |
24 |     fn put_field(&mut self, current_method_class: Rc<dyn Class>, class_index: u16, jvm: &mut JVM, value: Value<dyn Class, dyn Object>) ->...
   |                 - expected 0 type parameters

error[E0049]: method `exec_method` has 1 type parameter but its trait declaration has 0 type parameters
  --> src/reference/object/natives/string.rs:23:20
   |
23 |     fn exec_method<C: Class>(&mut self, current_method_class: Rc<C>, jvm: &mut JVM, method: &MethodInfo) -> Result<bool, Error> {
   |                    ^ found 1 type parameter
   |
  ::: src/reference/object.rs:26:19
   |
26 |     fn exec_method(&mut self, current_method_class: Rc<dyn Class>, jvm: &mut JVM, method: &MethodInfo) -> Result<bool, Error>; // Figure ...
   |                   - expected 0 type parameters

error[E0049]: method `class` has 1 type parameter but its trait declaration has 0 type parameters
  --> src/reference/object/natives/string.rs:48:14
   |
48 |     fn class<C: Class>(&self) -> Rc<C> {
   |              ^ found 1 type parameter
   |
  ::: src/reference/object.rs:28:13
   |
28 |     fn class(&self) -> Rc<dyn Class>;
   |             - expected 0 type parameters

error[E0308]: mismatched types
  --> src/jvm/operations.rs:31:46
   |
31 |         frame.op_stack.push(Value::Reference(Rc::new(Reference::Null)));
   |                             ---------------- ^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `reference::Reference`, found struct `std::rc::Rc`
   |                             |
   |                             arguments to this enum variant are incorrect
   |
   = note: expected enum `reference::Reference<dyn class::Class, dyn reference::object::Object>`
            found struct `std::rc::Rc<reference::Reference<_, _>>`
note: tuple variant defined here
  --> src/value.rs:29:5
   |
29 |     Reference(reference::Reference<C, O>)
   |     ^^^^^^^^^

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<(dyn class::Class + 'static)>` in the current scope
   --> src/jvm/operations.rs:171:41
    |
171 |         let entry = frame.rt_const_pool.cp_entry(frame.current_method.code()?[pc] as u16)?;
    |                                         ^^^^^^^^ method not found in `std::rc::Rc<(dyn class::Class + 'static)>`

error[E0614]: type `i32` cannot be dereferenced
   --> src/jvm/operations.rs:173:65
    |
173 |             Entry::Integer(i) => frame.op_stack.push(Value::Int(*i)),
    |                                                                 ^^

error[E0614]: type `f32` cannot be dereferenced
   --> src/jvm/operations.rs:174:65
    |
174 |             Entry::Float(f) => frame.op_stack.push(Value::Float(*f)),
    |                                                                 ^^

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
   --> src/jvm/operations.rs:182:43
    |
182 |                 let s_raw = current_class.cp_entry(*s)?.as_utf8()?; 
    |                                           ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0614]: type `u16` cannot be dereferenced
   --> src/jvm/operations.rs:182:52
    |
182 |                 let s_raw = current_class.cp_entry(*s)?.as_utf8()?; 
    |                                                    ^^

error[E0609]: no field `m_class` on type `customobject::CustomObject<dyn class::Class>`
   --> src/jvm/operations.rs:184:53
    |
184 |                 let string_class = Rc::clone(&s_obj.m_class);
    |                                                     ^^^^^^^ help: a field with a similar name exists: `class`

error[E0599]: the method `clone` exists for struct `customobject::CustomObject<dyn class::Class>`, but its trait bounds were not satisfied
   --> src/jvm/operations.rs:185:53
    |
185 |                 let s_ref = Reference::Object(s_obj.clone(), Rc::new(Monitor::new()));             
    |                                                     ^^^^^ method cannot be called on `customobject::CustomObject<dyn class::Class>` due to unsatisfied trait bounds
    |
   ::: src/reference/object/customobject.rs:15:1
    |
15  | pub struct CustomObject<C: Class + ?Sized> {
    | ------------------------------------------
    | |
    | method `clone` not found for this struct
    | doesn't satisfy `_: Clone`
    |
   ::: src/class.rs:10:1
    |
10  | pub trait Class {
    | --------------- doesn't satisfy `dyn class::Class: Clone`
    |
note: trait bound `dyn class::Class: Clone` was not satisfied
   --> src/reference/object/customobject.rs:14:10
    |
14  | #[derive(Clone, PartialEq, Debug)]
    |          ^^^^^ unsatisfied trait bound introduced in this `derive` macro
    = note: the following trait bounds were not satisfied:
            `dyn class::Class: Clone`
            which is required by `customobject::CustomObject<dyn class::Class>: Clone`
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `clone`, perhaps you need to implement it:
            candidate #1: `Clone`

error[E0308]: mismatched types
   --> src/jvm/operations.rs:188:53
    |
188 |                 let carray_asref = Reference::Array(carray, Rc::new(Monitor::new()));
    |                                    ---------------- ^^^^^^ expected struct `std::rc::Rc`, found enum `reference::array::Array`
    |                                    |
    |                                    arguments to this enum variant are incorrect
    |
    = note: expected struct `std::rc::Rc<reference::array::Array<_, _>>`
                 found enum `reference::array::Array<_, _>`
note: tuple variant defined here
   --> src/reference.rs:59:5
    |
59  |     Array(Rc<Array<C, O>>, Rc<Monitor>),
    |     ^^^^^

error[E0308]: mismatched types
   --> src/jvm/operations.rs:192:54
    |
192 |                 frame.op_stack.push(Value::Reference(Rc::clone(&mut s_ref_rc)));
    |                                     ---------------- ^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `reference::Reference`, found struct `std::rc::Rc`
    |                                     |
    |                                     arguments to this enum variant are incorrect
    |
    = note: expected enum `reference::Reference<dyn class::Class, dyn reference::object::Object>`
             found struct `std::rc::Rc<reference::Reference<_, _>>`
note: tuple variant defined here
   --> src/value.rs:29:5
    |
29  |     Reference(reference::Reference<C, O>)
    |     ^^^^^^^^^

error[E0308]: mismatched types
   --> src/jvm/operations.rs:193:54
    |
193 |                 frame.op_stack.push(Value::Reference(s_ref_rc)); // duplicate the value, so we still have one afterwards.
    |                                     ---------------- ^^^^^^^^ expected enum `reference::Reference`, found struct `std::rc::Rc`
    |                                     |
    |                                     arguments to this enum variant are incorrect
    |
    = note: expected enum `reference::Reference<dyn class::Class, dyn reference::object::Object>`
             found struct `std::rc::Rc<reference::Reference<_, _>>`
note: tuple variant defined here
   --> src/value.rs:29:5
    |
29  |     Reference(reference::Reference<C, O>)
    |     ^^^^^^^^^

error[E0308]: mismatched types
   --> src/jvm/operations.rs:194:54
    |
194 |                 frame.op_stack.push(Value::Reference(Rc::new(carray_asref)));
    |                                     ---------------- ^^^^^^^^^^^^^^^^^^^^^ expected enum `reference::Reference`, found struct `std::rc::Rc`
    |                                     |
    |                                     arguments to this enum variant are incorrect
    |
    = note: expected enum `reference::Reference<dyn class::Class, dyn reference::object::Object>`
             found struct `std::rc::Rc<reference::Reference<_, _>>`
note: tuple variant defined here
   --> src/value.rs:29:5
    |
29  |     Reference(reference::Reference<C, O>)
    |     ^^^^^^^^^

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<(dyn class::Class + 'static)>` in the current scope
   --> src/jvm/operations.rs:261:41
    |
261 |         let entry = frame.rt_const_pool.cp_entry(frame.current_method.code()?[pc] as u16 + 
    |                                         ^^^^^^^^ method not found in `std::rc::Rc<(dyn class::Class + 'static)>`

error[E0614]: type `i32` cannot be dereferenced
   --> src/jvm/operations.rs:264:65
    |
264 |             Entry::Integer(i) => frame.op_stack.push(Value::Int(*i)),
    |                                                                 ^^

error[E0614]: type `f32` cannot be dereferenced
   --> src/jvm/operations.rs:265:65
    |
265 |             Entry::Float(f) => frame.op_stack.push(Value::Float(*f)),
    |                                                                 ^^

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<(dyn class::Class + 'static)>` in the current scope
   --> src/jvm/operations.rs:333:41
    |
333 |         let entry = frame.rt_const_pool.cp_entry(frame.current_method.code()?[pc] as u16 + 
    |                                         ^^^^^^^^ method not found in `std::rc::Rc<(dyn class::Class + 'static)>`

error[E0614]: type `f64` cannot be dereferenced
   --> src/jvm/operations.rs:337:51
    |
337 |                 frame.op_stack.push(Value::Double(*d));
    |                                                   ^^

error[E0614]: type `i64` cannot be dereferenced
   --> src/jvm/operations.rs:340:49
    |
340 |                 frame.op_stack.push(Value::Long(*l));
    |                                                 ^^

error[E0308]: mismatched types
   --> src/jvm/operations.rs:440:46
    |
440 |         frame.op_stack.push(Value::Reference(var.as_reference()?.clone()));
    |                             ---------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `reference::Reference`, found struct `std::rc::Rc`
    |                             |
    |                             arguments to this enum variant are incorrect
    |
    = note: expected enum `reference::Reference<dyn class::Class, dyn reference::object::Object>`
             found struct `std::rc::Rc<reference::Reference<dyn class::Class, dyn reference::object::Object>>`
note: tuple variant defined here
   --> src/value.rs:29:5
    |
29  |     Reference(reference::Reference<C, O>)
    |     ^^^^^^^^^

error[E0308]: mismatched types
   --> src/jvm/operations.rs:576:46
    |
576 |         frame.op_stack.push(Value::Reference(var.as_reference()?.clone()));
    |                             ---------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `reference::Reference`, found struct `std::rc::Rc`
    |                             |
    |                             arguments to this enum variant are incorrect
    |
    = note: expected enum `reference::Reference<dyn class::Class, dyn reference::object::Object>`
             found struct `std::rc::Rc<reference::Reference<dyn class::Class, dyn reference::object::Object>>`
note: tuple variant defined here
   --> src/value.rs:29:5
    |
29  |     Reference(reference::Reference<C, O>)
    |     ^^^^^^^^^

error[E0308]: mismatched types
   --> src/jvm/operations.rs:584:46
    |
584 |         frame.op_stack.push(Value::Reference(var.as_reference()?.clone()));
    |                             ---------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `reference::Reference`, found struct `std::rc::Rc`
    |                             |
    |                             arguments to this enum variant are incorrect
    |
    = note: expected enum `reference::Reference<dyn class::Class, dyn reference::object::Object>`
             found struct `std::rc::Rc<reference::Reference<dyn class::Class, dyn reference::object::Object>>`
note: tuple variant defined here
   --> src/value.rs:29:5
    |
29  |     Reference(reference::Reference<C, O>)
    |     ^^^^^^^^^

error[E0308]: mismatched types
   --> src/jvm/operations.rs:592:46
    |
592 |         frame.op_stack.push(Value::Reference(var.as_reference()?.clone()));
    |                             ---------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `reference::Reference`, found struct `std::rc::Rc`
    |                             |
    |                             arguments to this enum variant are incorrect
    |
    = note: expected enum `reference::Reference<dyn class::Class, dyn reference::object::Object>`
             found struct `std::rc::Rc<reference::Reference<dyn class::Class, dyn reference::object::Object>>`
note: tuple variant defined here
   --> src/value.rs:29:5
    |
29  |     Reference(reference::Reference<C, O>)
    |     ^^^^^^^^^

error[E0308]: `?` operator has incompatible types
   --> src/jvm/operations.rs:600:46
    |
600 |         frame.op_stack.push(Value::Reference(var.as_reference()?));
    |                                              ^^^^^^^^^^^^^^^^^^^ expected enum `reference::Reference`, found struct `std::rc::Rc`
    |
    = note: `?` operator cannot convert from `std::rc::Rc<reference::Reference<dyn class::Class, dyn reference::object::Object>>` to `reference::Reference<dyn class::Class, dyn reference::object::Object>`
    = note: expected enum `reference::Reference<dyn class::Class, dyn reference::object::Object>`
             found struct `std::rc::Rc<reference::Reference<dyn class::Class, dyn reference::object::Object>>`

error[E0308]: mismatched types
   --> src/jvm/operations.rs:891:48
    |
891 |         frame.insert_local(VarValue::Reference(val.as_reference()?.clone()), index);
    |                            ------------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `reference::Reference`, found struct `std::rc::Rc`
    |                            |
    |                            arguments to this enum variant are incorrect
    |
    = note: expected enum `reference::Reference<dyn class::Class, dyn reference::object::Object>`
             found struct `std::rc::Rc<reference::Reference<dyn class::Class, dyn reference::object::Object>>`
note: tuple variant defined here
   --> src/value.rs:251:5
    |
251 |     Reference(reference::Reference<C, O>),
    |     ^^^^^^^^^

error[E0308]: mismatched types
    --> src/jvm/operations.rs:1078:48
     |
1078 |         frame.insert_local(VarValue::Reference(val.as_reference()?.clone()), 0);
     |                            ------------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `reference::Reference`, found struct `std::rc::Rc`
     |                            |
     |                            arguments to this enum variant are incorrect
     |
     = note: expected enum `reference::Reference<dyn class::Class, dyn reference::object::Object>`
              found struct `std::rc::Rc<reference::Reference<dyn class::Class, dyn reference::object::Object>>`
note: tuple variant defined here
    --> src/value.rs:251:5
     |
251  |     Reference(reference::Reference<C, O>),
     |     ^^^^^^^^^

error[E0308]: mismatched types
    --> src/jvm/operations.rs:1089:48
     |
1089 |         frame.insert_local(VarValue::Reference(val.as_reference()?.clone()), 1);
     |                            ------------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `reference::Reference`, found struct `std::rc::Rc`
     |                            |
     |                            arguments to this enum variant are incorrect
     |
     = note: expected enum `reference::Reference<dyn class::Class, dyn reference::object::Object>`
              found struct `std::rc::Rc<reference::Reference<dyn class::Class, dyn reference::object::Object>>`
note: tuple variant defined here
    --> src/value.rs:251:5
     |
251  |     Reference(reference::Reference<C, O>),
     |     ^^^^^^^^^

error[E0308]: mismatched types
    --> src/jvm/operations.rs:1100:48
     |
1100 |         frame.insert_local(VarValue::Reference(val.as_reference()?.clone()), 2);
     |                            ------------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `reference::Reference`, found struct `std::rc::Rc`
     |                            |
     |                            arguments to this enum variant are incorrect
     |
     = note: expected enum `reference::Reference<dyn class::Class, dyn reference::object::Object>`
              found struct `std::rc::Rc<reference::Reference<dyn class::Class, dyn reference::object::Object>>`
note: tuple variant defined here
    --> src/value.rs:251:5
     |
251  |     Reference(reference::Reference<C, O>),
     |     ^^^^^^^^^

error[E0308]: mismatched types
    --> src/jvm/operations.rs:1111:48
     |
1111 |         frame.insert_local(VarValue::Reference(val.as_reference()?.clone()), 3);
     |                            ------------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `reference::Reference`, found struct `std::rc::Rc`
     |                            |
     |                            arguments to this enum variant are incorrect
     |
     = note: expected enum `reference::Reference<dyn class::Class, dyn reference::object::Object>`
              found struct `std::rc::Rc<reference::Reference<dyn class::Class, dyn reference::object::Object>>`
note: tuple variant defined here
    --> src/value.rs:251:5
     |
251  |     Reference(reference::Reference<C, O>),
     |     ^^^^^^^^^

error[E0599]: the method `clone` exists for enum `value::Value<(dyn class::Class + 'static), (dyn reference::object::Object + 'static)>`, but its trait bounds were not satisfied
     |
    ::: src/value.rs:20:1
     |
20   | pub enum Value<C: Class + ?Sized, O: Object + ?Sized> {
     | -----------------------------------------------------
     | |
     | method `clone` not found for this enum
     | doesn't satisfy `_: Clone`
    --> src/jvm/operations.rs:1423:49
     |
1423 |         let val = frame.op_stack[top_index - 1].clone();
     |                                                 ^^^^^ method cannot be called on `value::Value<(dyn class::Class + 'static), (dyn reference::object::Object + 'static)>` due to unsatisfied trait bounds
     |
    ::: src/class.rs:10:1
     |
10   | pub trait Class {
     | --------------- doesn't satisfy `dyn class::Class: Clone`
     |
    ::: src/reference/object.rs:11:1
     |
11   | pub trait Object {
     | ---------------- doesn't satisfy `dyn reference::object::Object: Clone`
     |
note: the following trait bounds were not satisfied:
      `dyn class::Class: Clone`
      `dyn reference::object::Object: Clone`
    --> src/value.rs:19:10
     |
19   | #[derive(Clone, PartialEq)]
     |          ^^^^^ unsatisfied trait bound introduced in this `derive` macro
     = note: the following trait bounds were not satisfied:
             `dyn class::Class: Clone`
             which is required by `value::Value<dyn class::Class, dyn reference::object::Object>: Clone`
             `dyn reference::object::Object: Clone`
             which is required by `value::Value<dyn class::Class, dyn reference::object::Object>: Clone`
     = help: items from traits can only be used if the trait is implemented and in scope
     = note: the following trait defines an item `clone`, perhaps you need to implement it:
             candidate #1: `Clone`

error[E0599]: the method `clone` exists for enum `value::Value<dyn class::Class, dyn reference::object::Object>`, but its trait bounds were not satisfied
     |
    ::: src/value.rs:20:1
     |
20   | pub enum Value<C: Class + ?Sized, O: Object + ?Sized> {
     | -----------------------------------------------------
     | |
     | method `clone` not found for this enum
     | doesn't satisfy `_: Clone`
    --> src/jvm/operations.rs:1448:33
     |
1448 |         frame.op_stack.push(val.clone());
     |                                 ^^^^^ method cannot be called on `value::Value<dyn class::Class, dyn reference::object::Object>` due to unsatisfied trait bounds
     |
    ::: src/class.rs:10:1
     |
10   | pub trait Class {
     | --------------- doesn't satisfy `dyn class::Class: Clone`
     |
    ::: src/reference/object.rs:11:1
     |
11   | pub trait Object {
     | ---------------- doesn't satisfy `dyn reference::object::Object: Clone`
     |
note: the following trait bounds were not satisfied:
      `dyn class::Class: Clone`
      `dyn reference::object::Object: Clone`
    --> src/value.rs:19:10
     |
19   | #[derive(Clone, PartialEq)]
     |          ^^^^^ unsatisfied trait bound introduced in this `derive` macro
     = note: the following trait bounds were not satisfied:
             `dyn class::Class: Clone`
             which is required by `value::Value<dyn class::Class, dyn reference::object::Object>: Clone`
             `dyn reference::object::Object: Clone`
             which is required by `value::Value<dyn class::Class, dyn reference::object::Object>: Clone`
     = help: items from traits can only be used if the trait is implemented and in scope
     = note: the following trait defines an item `clone`, perhaps you need to implement it:
             candidate #1: `Clone`

error[E0599]: the method `clone` exists for enum `value::Value<dyn class::Class, dyn reference::object::Object>`, but its trait bounds were not satisfied
     |
    ::: src/value.rs:20:1
     |
20   | pub enum Value<C: Class + ?Sized, O: Object + ?Sized> {
     | -----------------------------------------------------
     | |
     | method `clone` not found for this enum
     | doesn't satisfy `_: Clone`
    --> src/jvm/operations.rs:1476:37
     |
1476 |             frame.op_stack.push(val.clone());
     |                                     ^^^^^ method cannot be called on `value::Value<dyn class::Class, dyn reference::object::Object>` due to unsatisfied trait bounds
     |
    ::: src/class.rs:10:1
     |
10   | pub trait Class {
     | --------------- doesn't satisfy `dyn class::Class: Clone`
     |
    ::: src/reference/object.rs:11:1
     |
11   | pub trait Object {
     | ---------------- doesn't satisfy `dyn reference::object::Object: Clone`
     |
note: the following trait bounds were not satisfied:
      `dyn class::Class: Clone`
      `dyn reference::object::Object: Clone`
    --> src/value.rs:19:10
     |
19   | #[derive(Clone, PartialEq)]
     |          ^^^^^ unsatisfied trait bound introduced in this `derive` macro
     = note: the following trait bounds were not satisfied:
             `dyn class::Class: Clone`
             which is required by `value::Value<dyn class::Class, dyn reference::object::Object>: Clone`
             `dyn reference::object::Object: Clone`
             which is required by `value::Value<dyn class::Class, dyn reference::object::Object>: Clone`
     = help: items from traits can only be used if the trait is implemented and in scope
     = note: the following trait defines an item `clone`, perhaps you need to implement it:
             candidate #1: `Clone`

error[E0599]: the method `clone` exists for enum `value::Value<dyn class::Class, dyn reference::object::Object>`, but its trait bounds were not satisfied
     |
    ::: src/value.rs:20:1
     |
20   | pub enum Value<C: Class + ?Sized, O: Object + ?Sized> {
     | -----------------------------------------------------
     | |
     | method `clone` not found for this enum
     | doesn't satisfy `_: Clone`
    --> src/jvm/operations.rs:1482:37
     |
1482 |             frame.op_stack.push(val.clone());
     |                                     ^^^^^ method cannot be called on `value::Value<dyn class::Class, dyn reference::object::Object>` due to unsatisfied trait bounds
     |
    ::: src/class.rs:10:1
     |
10   | pub trait Class {
     | --------------- doesn't satisfy `dyn class::Class: Clone`
     |
    ::: src/reference/object.rs:11:1
     |
11   | pub trait Object {
     | ---------------- doesn't satisfy `dyn reference::object::Object: Clone`
     |
note: the following trait bounds were not satisfied:
      `dyn class::Class: Clone`
      `dyn reference::object::Object: Clone`
    --> src/value.rs:19:10
     |
19   | #[derive(Clone, PartialEq)]
     |          ^^^^^ unsatisfied trait bound introduced in this `derive` macro
     = note: the following trait bounds were not satisfied:
             `dyn class::Class: Clone`
             which is required by `value::Value<dyn class::Class, dyn reference::object::Object>: Clone`
             `dyn reference::object::Object: Clone`
             which is required by `value::Value<dyn class::Class, dyn reference::object::Object>: Clone`
     = help: items from traits can only be used if the trait is implemented and in scope
     = note: the following trait defines an item `clone`, perhaps you need to implement it:
             candidate #1: `Clone`

error[E0599]: the method `clone` exists for enum `value::Value<(dyn class::Class + 'static), (dyn reference::object::Object + 'static)>`, but its trait bounds were not satisfied
     |
    ::: src/value.rs:20:1
     |
20   | pub enum Value<C: Class + ?Sized, O: Object + ?Sized> {
     | -----------------------------------------------------
     | |
     | method `clone` not found for this enum
     | doesn't satisfy `_: Clone`
    --> src/jvm/operations.rs:1496:49
     |
1496 |         let val = frame.op_stack[top_index - 1].clone();
     |                                                 ^^^^^ method cannot be called on `value::Value<(dyn class::Class + 'static), (dyn reference::object::Object + 'static)>` due to unsatisfied trait bounds
     |
    ::: src/class.rs:10:1
     |
10   | pub trait Class {
     | --------------- doesn't satisfy `dyn class::Class: Clone`
     |
    ::: src/reference/object.rs:11:1
     |
11   | pub trait Object {
     | ---------------- doesn't satisfy `dyn reference::object::Object: Clone`
     |
note: the following trait bounds were not satisfied:
      `dyn class::Class: Clone`
      `dyn reference::object::Object: Clone`
    --> src/value.rs:19:10
     |
19   | #[derive(Clone, PartialEq)]
     |          ^^^^^ unsatisfied trait bound introduced in this `derive` macro
     = note: the following trait bounds were not satisfied:
             `dyn class::Class: Clone`
             which is required by `value::Value<dyn class::Class, dyn reference::object::Object>: Clone`
             `dyn reference::object::Object: Clone`
             which is required by `value::Value<dyn class::Class, dyn reference::object::Object>: Clone`
     = help: items from traits can only be used if the trait is implemented and in scope
     = note: the following trait defines an item `clone`, perhaps you need to implement it:
             candidate #1: `Clone`

error[E0599]: the method `clone` exists for enum `value::Value<(dyn class::Class + 'static), (dyn reference::object::Object + 'static)>`, but its trait bounds were not satisfied
     |
    ::: src/value.rs:20:1
     |
20   | pub enum Value<C: Class + ?Sized, O: Object + ?Sized> {
     | -----------------------------------------------------
     | |
     | method `clone` not found for this enum
     | doesn't satisfy `_: Clone`
    --> src/jvm/operations.rs:1501:54
     |
1501 |             let val2 = frame.op_stack[top_index - 2].clone();
     |                                                      ^^^^^ method cannot be called on `value::Value<(dyn class::Class + 'static), (dyn reference::object::Object + 'static)>` due to unsatisfied trait bounds
     |
    ::: src/class.rs:10:1
     |
10   | pub trait Class {
     | --------------- doesn't satisfy `dyn class::Class: Clone`
     |
    ::: src/reference/object.rs:11:1
     |
11   | pub trait Object {
     | ---------------- doesn't satisfy `dyn reference::object::Object: Clone`
     |
note: the following trait bounds were not satisfied:
      `dyn class::Class: Clone`
      `dyn reference::object::Object: Clone`
    --> src/value.rs:19:10
     |
19   | #[derive(Clone, PartialEq)]
     |          ^^^^^ unsatisfied trait bound introduced in this `derive` macro
     = note: the following trait bounds were not satisfied:
             `dyn class::Class: Clone`
             which is required by `value::Value<dyn class::Class, dyn reference::object::Object>: Clone`
             `dyn reference::object::Object: Clone`
             which is required by `value::Value<dyn class::Class, dyn reference::object::Object>: Clone`
     = help: items from traits can only be used if the trait is implemented and in scope
     = note: the following trait defines an item `clone`, perhaps you need to implement it:
             candidate #1: `Clone`

error[E0599]: the method `clone` exists for enum `value::Value<dyn class::Class, dyn reference::object::Object>`, but its trait bounds were not satisfied
     |
    ::: src/value.rs:20:1
     |
20   | pub enum Value<C: Class + ?Sized, O: Object + ?Sized> {
     | -----------------------------------------------------
     | |
     | method `clone` not found for this enum
     | doesn't satisfy `_: Clone`
    --> src/jvm/operations.rs:1533:38
     |
1533 |             frame.op_stack.push(val2.clone());
     |                                      ^^^^^ method cannot be called on `value::Value<dyn class::Class, dyn reference::object::Object>` due to unsatisfied trait bounds
     |
    ::: src/class.rs:10:1
     |
10   | pub trait Class {
     | --------------- doesn't satisfy `dyn class::Class: Clone`
     |
    ::: src/reference/object.rs:11:1
     |
11   | pub trait Object {
     | ---------------- doesn't satisfy `dyn reference::object::Object: Clone`
     |
note: the following trait bounds were not satisfied:
      `dyn class::Class: Clone`
      `dyn reference::object::Object: Clone`
    --> src/value.rs:19:10
     |
19   | #[derive(Clone, PartialEq)]
     |          ^^^^^ unsatisfied trait bound introduced in this `derive` macro
     = note: the following trait bounds were not satisfied:
             `dyn class::Class: Clone`
             which is required by `value::Value<dyn class::Class, dyn reference::object::Object>: Clone`
             `dyn reference::object::Object: Clone`
             which is required by `value::Value<dyn class::Class, dyn reference::object::Object>: Clone`
     = help: items from traits can only be used if the trait is implemented and in scope
     = note: the following trait defines an item `clone`, perhaps you need to implement it:
             candidate #1: `Clone`

error[E0599]: the method `clone` exists for enum `value::Value<dyn class::Class, dyn reference::object::Object>`, but its trait bounds were not satisfied
     |
    ::: src/value.rs:20:1
     |
20   | pub enum Value<C: Class + ?Sized, O: Object + ?Sized> {
     | -----------------------------------------------------
     | |
     | method `clone` not found for this enum
     | doesn't satisfy `_: Clone`
    --> src/jvm/operations.rs:1534:37
     |
1534 |             frame.op_stack.push(val.clone());
     |                                     ^^^^^ method cannot be called on `value::Value<dyn class::Class, dyn reference::object::Object>` due to unsatisfied trait bounds
     |
    ::: src/class.rs:10:1
     |
10   | pub trait Class {
     | --------------- doesn't satisfy `dyn class::Class: Clone`
     |
    ::: src/reference/object.rs:11:1
     |
11   | pub trait Object {
     | ---------------- doesn't satisfy `dyn reference::object::Object: Clone`
     |
note: the following trait bounds were not satisfied:
      `dyn class::Class: Clone`
      `dyn reference::object::Object: Clone`
    --> src/value.rs:19:10
     |
19   | #[derive(Clone, PartialEq)]
     |          ^^^^^ unsatisfied trait bound introduced in this `derive` macro
     = note: the following trait bounds were not satisfied:
             `dyn class::Class: Clone`
             which is required by `value::Value<dyn class::Class, dyn reference::object::Object>: Clone`
             `dyn reference::object::Object: Clone`
             which is required by `value::Value<dyn class::Class, dyn reference::object::Object>: Clone`
     = help: items from traits can only be used if the trait is implemented and in scope
     = note: the following trait defines an item `clone`, perhaps you need to implement it:
             candidate #1: `Clone`

error[E0599]: the method `clone` exists for enum `value::Value<dyn class::Class, dyn reference::object::Object>`, but its trait bounds were not satisfied
     |
    ::: src/value.rs:20:1
     |
20   | pub enum Value<C: Class + ?Sized, O: Object + ?Sized> {
     | -----------------------------------------------------
     | |
     | method `clone` not found for this enum
     | doesn't satisfy `_: Clone`
    --> src/jvm/operations.rs:1540:37
     |
1540 |             frame.op_stack.push(val.clone());
     |                                     ^^^^^ method cannot be called on `value::Value<dyn class::Class, dyn reference::object::Object>` due to unsatisfied trait bounds
     |
    ::: src/class.rs:10:1
     |
10   | pub trait Class {
     | --------------- doesn't satisfy `dyn class::Class: Clone`
     |
    ::: src/reference/object.rs:11:1
     |
11   | pub trait Object {
     | ---------------- doesn't satisfy `dyn reference::object::Object: Clone`
     |
note: the following trait bounds were not satisfied:
      `dyn class::Class: Clone`
      `dyn reference::object::Object: Clone`
    --> src/value.rs:19:10
     |
19   | #[derive(Clone, PartialEq)]
     |          ^^^^^ unsatisfied trait bound introduced in this `derive` macro
     = note: the following trait bounds were not satisfied:
             `dyn class::Class: Clone`
             which is required by `value::Value<dyn class::Class, dyn reference::object::Object>: Clone`
             `dyn reference::object::Object: Clone`
             which is required by `value::Value<dyn class::Class, dyn reference::object::Object>: Clone`
     = help: items from traits can only be used if the trait is implemented and in scope
     = note: the following trait defines an item `clone`, perhaps you need to implement it:
             candidate #1: `Clone`

error[E0599]: the method `clone` exists for enum `value::Value<dyn class::Class, dyn reference::object::Object>`, but its trait bounds were not satisfied
     |
    ::: src/value.rs:20:1
     |
20   | pub enum Value<C: Class + ?Sized, O: Object + ?Sized> {
     | -----------------------------------------------------
     | |
     | method `clone` not found for this enum
     | doesn't satisfy `_: Clone`
    --> src/jvm/operations.rs:1575:46
     |
1575 |                     frame.op_stack.push(val2.clone());
     |                                              ^^^^^ method cannot be called on `value::Value<dyn class::Class, dyn reference::object::Object>` due to unsatisfied trait bounds
     |
    ::: src/class.rs:10:1
     |
10   | pub trait Class {
     | --------------- doesn't satisfy `dyn class::Class: Clone`
     |
    ::: src/reference/object.rs:11:1
     |
11   | pub trait Object {
     | ---------------- doesn't satisfy `dyn reference::object::Object: Clone`
     |
note: the following trait bounds were not satisfied:
      `dyn class::Class: Clone`
      `dyn reference::object::Object: Clone`
    --> src/value.rs:19:10
     |
19   | #[derive(Clone, PartialEq)]
     |          ^^^^^ unsatisfied trait bound introduced in this `derive` macro
     = note: the following trait bounds were not satisfied:
             `dyn class::Class: Clone`
             which is required by `value::Value<dyn class::Class, dyn reference::object::Object>: Clone`
             `dyn reference::object::Object: Clone`
             which is required by `value::Value<dyn class::Class, dyn reference::object::Object>: Clone`
     = help: items from traits can only be used if the trait is implemented and in scope
     = note: the following trait defines an item `clone`, perhaps you need to implement it:
             candidate #1: `Clone`

error[E0599]: the method `clone` exists for enum `value::Value<dyn class::Class, dyn reference::object::Object>`, but its trait bounds were not satisfied
     |
    ::: src/value.rs:20:1
     |
20   | pub enum Value<C: Class + ?Sized, O: Object + ?Sized> {
     | -----------------------------------------------------
     | |
     | method `clone` not found for this enum
     | doesn't satisfy `_: Clone`
    --> src/jvm/operations.rs:1576:45
     |
1576 |                     frame.op_stack.push(val.clone());
     |                                             ^^^^^ method cannot be called on `value::Value<dyn class::Class, dyn reference::object::Object>` due to unsatisfied trait bounds
     |
    ::: src/class.rs:10:1
     |
10   | pub trait Class {
     | --------------- doesn't satisfy `dyn class::Class: Clone`
     |
    ::: src/reference/object.rs:11:1
     |
11   | pub trait Object {
     | ---------------- doesn't satisfy `dyn reference::object::Object: Clone`
     |
note: the following trait bounds were not satisfied:
      `dyn class::Class: Clone`
      `dyn reference::object::Object: Clone`
    --> src/value.rs:19:10
     |
19   | #[derive(Clone, PartialEq)]
     |          ^^^^^ unsatisfied trait bound introduced in this `derive` macro
     = note: the following trait bounds were not satisfied:
             `dyn class::Class: Clone`
             which is required by `value::Value<dyn class::Class, dyn reference::object::Object>: Clone`
             `dyn reference::object::Object: Clone`
             which is required by `value::Value<dyn class::Class, dyn reference::object::Object>: Clone`
     = help: items from traits can only be used if the trait is implemented and in scope
     = note: the following trait defines an item `clone`, perhaps you need to implement it:
             candidate #1: `Clone`

error[E0599]: the method `clone` exists for enum `value::Value<dyn class::Class, dyn reference::object::Object>`, but its trait bounds were not satisfied
     |
    ::: src/value.rs:20:1
     |
20   | pub enum Value<C: Class + ?Sized, O: Object + ?Sized> {
     | -----------------------------------------------------
     | |
     | method `clone` not found for this enum
     | doesn't satisfy `_: Clone`
    --> src/jvm/operations.rs:1583:46
     |
1583 |                     frame.op_stack.push(val2.clone());
     |                                              ^^^^^ method cannot be called on `value::Value<dyn class::Class, dyn reference::object::Object>` due to unsatisfied trait bounds
     |
    ::: src/class.rs:10:1
     |
10   | pub trait Class {
     | --------------- doesn't satisfy `dyn class::Class: Clone`
     |
    ::: src/reference/object.rs:11:1
     |
11   | pub trait Object {
     | ---------------- doesn't satisfy `dyn reference::object::Object: Clone`
     |
note: the following trait bounds were not satisfied:
      `dyn class::Class: Clone`
      `dyn reference::object::Object: Clone`
    --> src/value.rs:19:10
     |
19   | #[derive(Clone, PartialEq)]
     |          ^^^^^ unsatisfied trait bound introduced in this `derive` macro
     = note: the following trait bounds were not satisfied:
             `dyn class::Class: Clone`
             which is required by `value::Value<dyn class::Class, dyn reference::object::Object>: Clone`
             `dyn reference::object::Object: Clone`
             which is required by `value::Value<dyn class::Class, dyn reference::object::Object>: Clone`
     = help: items from traits can only be used if the trait is implemented and in scope
     = note: the following trait defines an item `clone`, perhaps you need to implement it:
             candidate #1: `Clone`

error[E0599]: the method `clone` exists for enum `value::Value<dyn class::Class, dyn reference::object::Object>`, but its trait bounds were not satisfied
     |
    ::: src/value.rs:20:1
     |
20   | pub enum Value<C: Class + ?Sized, O: Object + ?Sized> {
     | -----------------------------------------------------
     | |
     | method `clone` not found for this enum
     | doesn't satisfy `_: Clone`
    --> src/jvm/operations.rs:1584:45
     |
1584 |                     frame.op_stack.push(val.clone());
     |                                             ^^^^^ method cannot be called on `value::Value<dyn class::Class, dyn reference::object::Object>` due to unsatisfied trait bounds
     |
    ::: src/class.rs:10:1
     |
10   | pub trait Class {
     | --------------- doesn't satisfy `dyn class::Class: Clone`
     |
    ::: src/reference/object.rs:11:1
     |
11   | pub trait Object {
     | ---------------- doesn't satisfy `dyn reference::object::Object: Clone`
     |
note: the following trait bounds were not satisfied:
      `dyn class::Class: Clone`
      `dyn reference::object::Object: Clone`
    --> src/value.rs:19:10
     |
19   | #[derive(Clone, PartialEq)]
     |          ^^^^^ unsatisfied trait bound introduced in this `derive` macro
     = note: the following trait bounds were not satisfied:
             `dyn class::Class: Clone`
             which is required by `value::Value<dyn class::Class, dyn reference::object::Object>: Clone`
             `dyn reference::object::Object: Clone`
             which is required by `value::Value<dyn class::Class, dyn reference::object::Object>: Clone`
     = help: items from traits can only be used if the trait is implemented and in scope
     = note: the following trait defines an item `clone`, perhaps you need to implement it:
             candidate #1: `Clone`

error[E0599]: the method `clone` exists for enum `value::Value<dyn class::Class, dyn reference::object::Object>`, but its trait bounds were not satisfied
     |
    ::: src/value.rs:20:1
     |
20   | pub enum Value<C: Class + ?Sized, O: Object + ?Sized> {
     | -----------------------------------------------------
     | |
     | method `clone` not found for this enum
     | doesn't satisfy `_: Clone`
    --> src/jvm/operations.rs:1601:41
     |
1601 |                 frame.op_stack.push(val.clone());
     |                                         ^^^^^ method cannot be called on `value::Value<dyn class::Class, dyn reference::object::Object>` due to unsatisfied trait bounds
     |
    ::: src/class.rs:10:1
     |
10   | pub trait Class {
     | --------------- doesn't satisfy `dyn class::Class: Clone`
     |
    ::: src/reference/object.rs:11:1
     |
11   | pub trait Object {
     | ---------------- doesn't satisfy `dyn reference::object::Object: Clone`
     |
note: the following trait bounds were not satisfied:
      `dyn class::Class: Clone`
      `dyn reference::object::Object: Clone`
    --> src/value.rs:19:10
     |
19   | #[derive(Clone, PartialEq)]
     |          ^^^^^ unsatisfied trait bound introduced in this `derive` macro
     = note: the following trait bounds were not satisfied:
             `dyn class::Class: Clone`
             which is required by `value::Value<dyn class::Class, dyn reference::object::Object>: Clone`
             `dyn reference::object::Object: Clone`
             which is required by `value::Value<dyn class::Class, dyn reference::object::Object>: Clone`
     = help: items from traits can only be used if the trait is implemented and in scope
     = note: the following trait defines an item `clone`, perhaps you need to implement it:
             candidate #1: `Clone`

error[E0599]: the method `clone` exists for enum `value::Value<dyn class::Class, dyn reference::object::Object>`, but its trait bounds were not satisfied
     |
    ::: src/value.rs:20:1
     |
20   | pub enum Value<C: Class + ?Sized, O: Object + ?Sized> {
     | -----------------------------------------------------
     | |
     | method `clone` not found for this enum
     | doesn't satisfy `_: Clone`
    --> src/jvm/operations.rs:1607:41
     |
1607 |                 frame.op_stack.push(val.clone());
     |                                         ^^^^^ method cannot be called on `value::Value<dyn class::Class, dyn reference::object::Object>` due to unsatisfied trait bounds
     |
    ::: src/class.rs:10:1
     |
10   | pub trait Class {
     | --------------- doesn't satisfy `dyn class::Class: Clone`
     |
    ::: src/reference/object.rs:11:1
     |
11   | pub trait Object {
     | ---------------- doesn't satisfy `dyn reference::object::Object: Clone`
     |
note: the following trait bounds were not satisfied:
      `dyn class::Class: Clone`
      `dyn reference::object::Object: Clone`
    --> src/value.rs:19:10
     |
19   | #[derive(Clone, PartialEq)]
     |          ^^^^^ unsatisfied trait bound introduced in this `derive` macro
     = note: the following trait bounds were not satisfied:
             `dyn class::Class: Clone`
             which is required by `value::Value<dyn class::Class, dyn reference::object::Object>: Clone`
             `dyn reference::object::Object: Clone`
             which is required by `value::Value<dyn class::Class, dyn reference::object::Object>: Clone`
     = help: items from traits can only be used if the trait is implemented and in scope
     = note: the following trait defines an item `clone`, perhaps you need to implement it:
             candidate #1: `Clone`

error[E0369]: binary operation `==` cannot be applied to type `std::rc::Rc<reference::Reference<dyn class::Class, dyn reference::object::Object>>`
    --> src/jvm/operations.rs:2817:40
     |
2817 |             match val1.as_reference()? == val2.as_reference()? {
     |                   -------------------- ^^ -------------------- std::rc::Rc<reference::Reference<dyn class::Class, dyn reference::object::Object>>
     |                   |
     |                   std::rc::Rc<reference::Reference<dyn class::Class, dyn reference::object::Object>>

error[E0369]: binary operation `!=` cannot be applied to type `std::rc::Rc<reference::Reference<dyn class::Class, dyn reference::object::Object>>`
    --> src/jvm/operations.rs:2842:40
     |
2842 |             match val1.as_reference()? != val2.as_reference()? {
     |                   -------------------- ^^ -------------------- std::rc::Rc<reference::Reference<dyn class::Class, dyn reference::object::Object>>
     |                   |
     |                   std::rc::Rc<reference::Reference<dyn class::Class, dyn reference::object::Object>>

error[E0308]: mismatched types
    --> src/jvm/operations.rs:2952:50
     |
2952 |             if !frame.current_method.returns_int(&frame.rt_const_pool)? {
     |                                      ----------- ^^^^^^^^^^^^^^^^^^^^ expected struct `class::classfile::ClassFile`, found trait object `dyn class::Class`
     |                                      |
     |                                      arguments to this function are incorrect
     |
     = note: expected reference `&std::rc::Rc<class::classfile::ClassFile>`
                found reference `&std::rc::Rc<(dyn class::Class + 'static)>`
note: associated function defined here
    --> src/class/classfile.rs:79:12
     |
79   |     pub fn returns_int(&self, current_class: &Rc<ClassFile>) -> Result<bool, Error> {
     |            ^^^^^^^^^^^        -----------------------------

error[E0308]: mismatched types
    --> src/jvm/operations.rs:2955:61
     |
2955 |             let ret_type = frame.current_method.return_char(&frame.rt_const_pool)?;
     |                                                 ----------- ^^^^^^^^^^^^^^^^^^^^ expected struct `class::classfile::ClassFile`, found trait object `dyn class::Class`
     |                                                 |
     |                                                 arguments to this function are incorrect
     |
     = note: expected reference `&std::rc::Rc<class::classfile::ClassFile>`
                found reference `&std::rc::Rc<(dyn class::Class + 'static)>`
note: associated function defined here
    --> src/class/classfile.rs:90:12
     |
90   |     pub fn return_char(&self, current_class: &Rc<ClassFile>) -> Result<char, Error>{
     |            ^^^^^^^^^^^        -----------------------------

error[E0308]: mismatched types
    --> src/jvm/operations.rs:2983:51
     |
2983 |             if !frame.current_method.returns_long(&frame.rt_const_pool)? {
     |                                      ------------ ^^^^^^^^^^^^^^^^^^^^ expected struct `class::classfile::ClassFile`, found trait object `dyn class::Class`
     |                                      |
     |                                      arguments to this function are incorrect
     |
     = note: expected reference `&std::rc::Rc<class::classfile::ClassFile>`
                found reference `&std::rc::Rc<(dyn class::Class + 'static)>`
note: associated function defined here
    --> src/class/classfile.rs:98:12
     |
98   |     pub fn returns_long(&self, current_class: &Rc<ClassFile>) -> Result<bool, Error> {
     |            ^^^^^^^^^^^^        -----------------------------

error[E0308]: mismatched types
    --> src/jvm/operations.rs:3005:52
     |
3005 |             if !frame.current_method.returns_float(&frame.rt_const_pool)? {
     |                                      ------------- ^^^^^^^^^^^^^^^^^^^^ expected struct `class::classfile::ClassFile`, found trait object `dyn class::Class`
     |                                      |
     |                                      arguments to this function are incorrect
     |
     = note: expected reference `&std::rc::Rc<class::classfile::ClassFile>`
                found reference `&std::rc::Rc<(dyn class::Class + 'static)>`
note: associated function defined here
    --> src/class/classfile.rs:106:12
     |
106  |     pub fn returns_float(&self, current_class: &Rc<ClassFile>) -> Result<bool, Error> {
     |            ^^^^^^^^^^^^^        -----------------------------

error[E0308]: mismatched types
    --> src/jvm/operations.rs:3027:53
     |
3027 |             if !frame.current_method.returns_double(&frame.rt_const_pool)? {
     |                                      -------------- ^^^^^^^^^^^^^^^^^^^^ expected struct `class::classfile::ClassFile`, found trait object `dyn class::Class`
     |                                      |
     |                                      arguments to this function are incorrect
     |
     = note: expected reference `&std::rc::Rc<class::classfile::ClassFile>`
                found reference `&std::rc::Rc<(dyn class::Class + 'static)>`
note: associated function defined here
    --> src/class/classfile.rs:114:12
     |
114  |     pub fn returns_double(&self, current_class: &Rc<ClassFile>) -> Result<bool, Error> {
     |            ^^^^^^^^^^^^^^        -----------------------------

error[E0308]: mismatched types
    --> src/jvm/operations.rs:3052:56
     |
3052 |             if !frame.current_method.returns_reference(&frame.rt_const_pool)? {
     |                                      ----------------- ^^^^^^^^^^^^^^^^^^^^ expected struct `class::classfile::ClassFile`, found trait object `dyn class::Class`
     |                                      |
     |                                      arguments to this function are incorrect
     |
     = note: expected reference `&std::rc::Rc<class::classfile::ClassFile>`
                found reference `&std::rc::Rc<(dyn class::Class + 'static)>`
note: associated function defined here
    --> src/class/classfile.rs:122:12
     |
122  |     pub fn returns_reference(&self, current_class: &Rc<ClassFile>) -> Result<bool, Error> {
     |            ^^^^^^^^^^^^^^^^^        -----------------------------

error[E0308]: mismatched types
    --> src/jvm/operations.rs:3062:77
     |
3062 |                 let ret_descriptor = frame.current_method.return_descriptor(&current_class)?;
     |                                                           ----------------- ^^^^^^^^^^^^^^ expected struct `class::classfile::ClassFile`, found trait object `dyn class::Class`
     |                                                           |
     |                                                           arguments to this function are incorrect
     |
     = note: expected reference `&std::rc::Rc<class::classfile::ClassFile>`
                found reference `&std::rc::Rc<dyn class::Class>`
note: associated function defined here
    --> src/class/classfile.rs:138:12
     |
138  |     pub fn return_descriptor<'a>(&self, current_class: &'a Rc< ClassFile>) -> Result<&'a str, Error> {
     |            ^^^^^^^^^^^^^^^^^            ---------------------------------

error[E0609]: no field `m_class` on type `&mut std::rc::Rc<dyn reference::object::Object>`
    --> src/jvm/operations.rs:3085:51
     |
3085 |                         let mut current_class = o.m_class.clone();
     |                                                   ^^^^^^^ unknown field

error[E0599]: no method named `has_super` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3097:57
     |
3097 | ...                   while current_interface.has_super() {
     |                                               ^^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `name` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3098:58
     |
3098 | ...                   if current_interface.name() == ret_descriptor {
     |                                            ^^^^ method not found in `std::rc::Rc<dyn class::Class>`
     |
     = help: items from traits can only be used if the trait is implemented and in scope
note: `instructions::Instruction` defines an item `name`, perhaps you need to implement it
    --> src/jvm/instructions.rs:16:1
     |
16   | pub trait Instruction {
     | ^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `super_name` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3102:104
     |
3102 | ...                   current_interface = self.resolve_class_reference(current_interface.super_name().unwrap())?;
     |                                                                                          ^^^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `has_super` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3119:49
     |
3119 |                         while current_interface.has_super() && found == false {
     |                                                 ^^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `name` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3120:50
     |
3120 | ...                   if current_interface.name() == ret_descriptor {
     |                                            ^^^^ method not found in `std::rc::Rc<dyn class::Class>`
     |
     = help: items from traits can only be used if the trait is implemented and in scope
note: `instructions::Instruction` defines an item `name`, perhaps you need to implement it
    --> src/jvm/instructions.rs:16:1
     |
16   | pub trait Instruction {
     | ^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `super_name` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3124:96
     |
3124 | ...                   current_interface = self.resolve_class_reference(current_interface.super_name().unwrap())?;
     |                                                                                          ^^^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<(dyn class::Class + 'static)>` in the current scope
    --> src/jvm/operations.rs:3149:85
     |
3149 |             println!("Returning from function {}, in class {}", frame.rt_const_pool.cp_entry(frame.current_method.name_index)?.as_utf8()?,
     |                                                                                     ^^^^^^^^ method not found in `std::rc::Rc<(dyn class::Class + 'static)>`

error[E0599]: no method named `name` found for struct `std::rc::Rc<(dyn class::Class + 'static)>` in the current scope
    --> src/jvm/operations.rs:3150:29
     |
3150 |         frame.rt_const_pool.name());
     |                             ^^^^ method not found in `std::rc::Rc<(dyn class::Class + 'static)>`
     |
     = help: items from traits can only be used if the trait is implemented and in scope
note: `instructions::Instruction` defines an item `name`, perhaps you need to implement it
    --> src/jvm/instructions.rs:16:1
     |
16   | pub trait Instruction {
     | ^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
    --> src/jvm/operations.rs:3151:51
     |
3151 |             if !frame.current_method.returns_void(&frame.rt_const_pool)? {
     |                                      ------------ ^^^^^^^^^^^^^^^^^^^^ expected struct `class::classfile::ClassFile`, found trait object `dyn class::Class`
     |                                      |
     |                                      arguments to this function are incorrect
     |
     = note: expected reference `&std::rc::Rc<class::classfile::ClassFile>`
                found reference `&std::rc::Rc<(dyn class::Class + 'static)>`
note: associated function defined here
    --> src/class/classfile.rs:130:12
     |
130  |     pub fn returns_void(&self, current_class: &Rc<ClassFile>) -> Result<bool, Error> {
     |            ^^^^^^^^^^^^        -----------------------------

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3169:35
     |
3169 |         let field = current_class.cp_entry(index)?.as_field_ref()?;
     |                                   ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3170:41
     |
3170 |         let class_index = current_class.cp_entry(field.class_index)?.as_class()?;
     |                                         ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3171:40
     |
3171 |         let class_name = current_class.cp_entry(*class_index)?.as_utf8()?;
     |                                        ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3173:43
     |
3173 |         let name_and_type = current_class.cp_entry(field.name_and_type_index)?.as_name_and_type()?;
     |                                           ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3174:34
     |
3174 |         let name = current_class.cp_entry(name_and_type.name_index)?.as_utf8()?;
     |                                  ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3175:40
     |
3175 |         let descriptor = current_class.cp_entry(name_and_type.descriptor_index)?.as_utf8()?;
     |                                        ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0308]: mismatched types
    --> src/jvm/operations.rs:3181:42
     |
3181 |             new_value = Value::Reference(inner_ref.clone());
     |                         ---------------- ^^^^^^^^^^^^^^^^^ expected enum `reference::Reference`, found struct `std::rc::Rc`
     |                         |
     |                         arguments to this enum variant are incorrect
     |
     = note: expected enum `reference::Reference<_, _>`
              found struct `std::rc::Rc<reference::Reference<dyn class::Class, dyn reference::object::Object>>`
note: tuple variant defined here
    --> src/value.rs:29:5
     |
29   |     Reference(reference::Reference<C, O>)
     |     ^^^^^^^^^

error[E0599]: the method `clone` exists for enum `value::Value<dyn class::Class, dyn reference::object::Object>`, but its trait bounds were not satisfied
     |
    ::: src/value.rs:20:1
     |
20   | pub enum Value<C: Class + ?Sized, O: Object + ?Sized> {
     | -----------------------------------------------------
     | |
     | method `clone` not found for this enum
     | doesn't satisfy `_: Clone`
    --> src/jvm/operations.rs:3184:34
     |
3184 |             new_value = (*field).clone();
     |                                  ^^^^^ method cannot be called on `value::Value<dyn class::Class, dyn reference::object::Object>` due to unsatisfied trait bounds
     |
    ::: src/class.rs:10:1
     |
10   | pub trait Class {
     | --------------- doesn't satisfy `dyn class::Class: Clone`
     |
    ::: src/reference/object.rs:11:1
     |
11   | pub trait Object {
     | ---------------- doesn't satisfy `dyn reference::object::Object: Clone`
     |
note: the following trait bounds were not satisfied:
      `dyn class::Class: Clone`
      `dyn reference::object::Object: Clone`
    --> src/value.rs:19:10
     |
19   | #[derive(Clone, PartialEq)]
     |          ^^^^^ unsatisfied trait bound introduced in this `derive` macro
     = note: the following trait bounds were not satisfied:
             `dyn class::Class: Clone`
             which is required by `value::Value<dyn class::Class, dyn reference::object::Object>: Clone`
             `dyn reference::object::Object: Clone`
             which is required by `value::Value<dyn class::Class, dyn reference::object::Object>: Clone`
     = help: items from traits can only be used if the trait is implemented and in scope
     = note: the following trait defines an item `clone`, perhaps you need to implement it:
             candidate #1: `Clone`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3198:35
     |
3198 |         let field = current_class.cp_entry(index)?.as_field_ref()?;
     |                                   ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3199:41
     |
3199 |         let class_index = current_class.cp_entry(field.class_index)?.as_class()?;
     |                                         ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3200:40
     |
3200 |         let class_name = current_class.cp_entry(*class_index)?.as_utf8()?;
     |                                        ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/jvm/operations.rs:3200:13
     |
3200 |         let class_name = current_class.cp_entry(*class_index)?.as_utf8()?;
     |             ^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: all local variables must have a statically known size
     = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/jvm/operations.rs:3200:26
     |
3200 |         let class_name = current_class.cp_entry(*class_index)?.as_utf8()?;
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: all local variables must have a statically known size
     = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/jvm/operations.rs:3200:73
     |
3200 |         let class_name = current_class.cp_entry(*class_index)?.as_utf8()?;
     |                                                                         ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `Break`
    --> /home/may/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/control_flow.rs:83:25
     |
83   | pub enum ControlFlow<B, C = ()> {
     |                         ^^^^^^ required by this bound in `Break`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3202:43
     |
3202 |         let name_and_type = current_class.cp_entry(field.name_and_type_index)?.as_name_and_type()?;
     |                                           ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3203:34
     |
3203 |         let name = current_class.cp_entry(name_and_type.name_index)?.as_utf8()?;
     |                                  ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3204:40
     |
3204 |         let descriptor = current_class.cp_entry(name_and_type.descriptor_index)?.as_utf8()?;
     |                                        ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3277:44
     |
3277 |             let method_ref = current_class.cp_entry(index)?.as_method_ref()?;
     |                                            ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3278:47
     |
3278 |             let name_and_type = current_class.cp_entry(method_ref.name_and_type_index)?.as_name_and_type()?;
     |                                               ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3279:38
     |
3279 |             let name = current_class.cp_entry(name_and_type.name_index)?.as_utf8()?;
     |                                      ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3280:44
     |
3280 |             let descriptor = current_class.cp_entry(name_and_type.descriptor_index)?.as_utf8()?;
     |                                            ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3281:40
     |
3281 |             let c_info = current_class.cp_entry(method_ref.class_index)?.as_class()?;
     |                                        ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3282:40
     |
3282 |             let c_name = current_class.cp_entry(*c_info)?.as_utf8()?;
     |                                        ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `has_super` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3301:21
     |
3301 |             while c.has_super() && !found {
     |                     ^^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `methods` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3302:33
     |
3302 |                 for method in c.methods() {
     |                                 ^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3305:47
     |
3305 |                     let method_descriptor = c.cp_entry(method.descriptor_index)?.as_utf8()?;
     |                                               ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3309:41
     |
3309 |                     let method_name = c.cp_entry(method.name_index)?.as_utf8()?;
     |                                         ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `super_name` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3318:56
     |
3318 |                     c = self.resolve_class_reference(c.super_name().unwrap())?;
     |                                                        ^^^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0609]: no field `m_class` on type `&std::rc::Rc<dyn reference::object::Object>`
    --> src/jvm/operations.rs:3331:40
     |
3331 |                 let mut obj_c = object.m_class.clone();
     |                                        ^^^^^^^ unknown field

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<(dyn class::Class + 'static)>` in the current scope
    --> src/jvm/operations.rs:3379:41
     |
3379 |         let entry = frame.rt_const_pool.cp_entry(index)?;
     |                                         ^^^^^^^^ method not found in `std::rc::Rc<(dyn class::Class + 'static)>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3386:43
     |
3386 |         let name_and_type = current_class.cp_entry(method_ref.name_and_type_index)?.as_name_and_type()?;
     |                                           ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3387:34
     |
3387 |         let name = current_class.cp_entry(name_and_type.name_index)?.as_utf8()?;
     |                                  ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3388:40
     |
3388 |         let descriptor = current_class.cp_entry(name_and_type.descriptor_index)?.as_utf8()?;
     |                                        ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3389:36
     |
3389 |         let c_info = current_class.cp_entry(method_ref.class_index)?.as_class()?;
     |                                    ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3390:36
     |
3390 |         let c_name = current_class.cp_entry(*c_info)?.as_utf8()?;
     |                                    ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `access_flags` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3392:15
     |
3392 |         if (c.access_flags().flags & flags::class::ACC_INTERFACE) > 0 {
     |               ^^^^^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `has_super` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3399:21
     |
3399 |             while c.has_super() && !found {
     |                     ^^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `methods` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3400:33
     |
3400 |                 for method in c.methods() {
     |                                 ^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3403:47
     |
3403 |                     let method_descriptor = c.cp_entry(method.descriptor_index)?.as_utf8()?;
     |                                               ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3407:41
     |
3407 |                     let method_name = c.cp_entry(method.name_index)?.as_utf8()?;
     |                                         ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `super_name` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3416:56
     |
3416 |                     c = self.resolve_class_reference(c.super_name().unwrap())?;
     |                                                        ^^^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3427:51
     |
3427 |         let resolved_name = resolved_method_class.cp_entry(resolved_method.name_index)?.as_utf8()?;
     |                                                   ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3428:51
     |
3428 |         let resolved_desc = resolved_method_class.cp_entry(resolved_method.descriptor_index)?.as_utf8()?;
     |                                                   ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3430:15
     |
3430 |         if (c.cp_entry(resolved_method.name_index)?.as_utf8()? != "<init>") && current_class.has_super() && ({
     |               ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `has_super` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3430:94
     |
3430 |         if (c.cp_entry(resolved_method.name_index)?.as_utf8()? != "<init>") && current_class.has_super() && ({
     |                                                                                              ^^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `has_super` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3434:24
     |
3434 |             while temp.has_super() {
     |                        ^^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `super_name` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3435:39
     |
3435 |                 let super_name = temp.super_name().unwrap();
     |                                       ^^^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `name` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3436:36
     |
3436 |                 if super_name == c.name() {
     |                                    ^^^^ method not found in `std::rc::Rc<dyn class::Class>`
     |
     = help: items from traits can only be used if the trait is implemented and in scope
note: `instructions::Instruction` defines an item `name`, perhaps you need to implement it
    --> src/jvm/instructions.rs:16:1
     |
16   | pub trait Instruction {
     | ^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `access_flags` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3444:16
     |
3444 |         && ((c.access_flags().flags & flags::class::ACC_SUPER) > 0 ) {
     |                ^^^^^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `super_name` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3445:48
     |
3445 |             c = self.resolve_class_reference(c.super_name().unwrap())?;
     |                                                ^^^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `methods` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3452:25
     |
3452 |         for method in c.methods() {
     |                         ^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3456:19
     |
3456 | ...   if (c.cp_entry(method.name_index)?.as_utf8()? == resolved_name) && (c.cp_entry(method.descriptor_index)?.as_utf8()? == resolved_des...
     |             ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3456:83
     |
3456 | ...?.as_utf8()? == resolved_name) && (c.cp_entry(method.descriptor_index)?.as_utf8()? == resolved_desc) {
     |                                         ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `access_flags` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3463:50
     |
3463 |         if actual_method_wrapped.is_none() & ((c.access_flags().flags & flags::class::ACC_INTERFACE) == 0) {
     |                                                  ^^^^^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `has_super` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3465:27
     |
3465 |             while c_super.has_super() {
     |                           ^^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `methods` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3466:33
     |
3466 |                 for method in c.methods() {
     |                                 ^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3470:33
     |
3470 | ...   if (c_super.cp_entry(method.name_index)?.as_utf8()? == resolved_name) && (c_super.cp_entry(method.descriptor_index)?.as_utf8()? == ...
     |                   ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3470:103
     |
3470 | ...tf8()? == resolved_name) && (c_super.cp_entry(method.descriptor_index)?.as_utf8()? == resolved_desc) {
     |                                         ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `super_name` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3476:64
     |
3476 |                 c_super = self.resolve_class_reference(c_super.super_name().unwrap())?;
     |                                                                ^^^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `access_flags` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3480:50
     |
3480 |         if actual_method_wrapped.is_none() & ((c.access_flags().flags & flags::class::ACC_INTERFACE) > 0) {
     |                                                  ^^^^^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `methods` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3482:37
     |
3482 |             for method in obj_class.methods() {
     |                                     ^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3486:31
     |
3486 | ...   if (obj_class.cp_entry(method.name_index)?.as_utf8()? == resolved_name) && (obj_class.cp_entry(method.descriptor_index)?.as_utf8()?...
     |                     ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3486:103
     |
3486 | ...8()? == resolved_name) && (obj_class.cp_entry(method.descriptor_index)?.as_utf8()? == resolved_desc) {
     |                                         ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<(dyn class::Class + 'static)>` in the current scope
    --> src/jvm/operations.rs:3536:41
     |
3536 |         let entry = frame.rt_const_pool.cp_entry(index)?;
     |                                         ^^^^^^^^ method not found in `std::rc::Rc<(dyn class::Class + 'static)>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3543:43
     |
3543 |         let name_and_type = current_class.cp_entry(method_ref.name_and_type_index)?.as_name_and_type()?;
     |                                           ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3544:34
     |
3544 |         let name = current_class.cp_entry(name_and_type.name_index)?.as_utf8()?;
     |                                  ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3545:40
     |
3545 |         let descriptor = current_class.cp_entry(name_and_type.descriptor_index)?.as_utf8()?;
     |                                        ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3546:36
     |
3546 |         let c_info = current_class.cp_entry(method_ref.class_index)?.as_class()?;
     |                                    ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3547:36
     |
3547 |         let c_name = current_class.cp_entry(*c_info)?.as_utf8()?;
     |                                    ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `access_flags` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3550:21
     |
3550 |             if !((c.access_flags().flags & flags::class::ACC_INTERFACE) > 0) {
     |                     ^^^^^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `access_flags` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3555:19
     |
3555 |             if (c.access_flags().flags & flags::class::ACC_INTERFACE) > 0 {
     |                   ^^^^^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `has_super` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3563:21
     |
3563 |             while c.has_super() && !found {
     |                     ^^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `methods` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3564:33
     |
3564 |                 for method in c.methods() {
     |                                 ^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3567:47
     |
3567 |                     let method_descriptor = c.cp_entry(method.descriptor_index)?.as_utf8()?;
     |                                               ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3571:41
     |
3571 |                     let method_name = c.cp_entry(method.name_index)?.as_utf8()?;
     |                                         ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `super_name` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3580:56
     |
3580 |                     c = self.resolve_class_reference(c.super_name().unwrap())?;
     |                                                        ^^^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<(dyn class::Class + 'static)>` in the current scope
    --> src/jvm/operations.rs:3616:55
     |
3616 |         let invoke_dynamic_info = frame.rt_const_pool.cp_entry(index)?.as_invoke_dynamic()?;
     |                                                       ^^^^^^^^ method not found in `std::rc::Rc<(dyn class::Class + 'static)>`

error[E0609]: no field `m_bootstrap_methods` on type `std::rc::Rc<(dyn class::Class + 'static)>`
    --> src/jvm/operations.rs:3618:60
     |
3618 |         let bootstrap_methods = match &frame.rt_const_pool.m_bootstrap_methods {
     |                                                            ^^^^^^^^^^^^^^^^^^^ unknown field

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<(dyn class::Class + 'static)>` in the current scope
    --> src/jvm/operations.rs:3623:49
     |
3623 |         let method_handle = frame.rt_const_pool.cp_entry(bootstrap_method.bootstrap_method_ref)?.as_method_handle()?;
     |                                                 ^^^^^^^^ method not found in `std::rc::Rc<(dyn class::Class + 'static)>`

error[E0277]: the size for values of type `dyn class::Class` cannot be known at compilation time
    --> src/jvm/operations.rs:3657:47
     |
3657 |         let objectref = Reference::new_object(current_class, index, self)?;
     |                         --------------------- ^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |                         |
     |                         required by a bound introduced by this call
     |
     = help: the trait `Sized` is not implemented for `dyn class::Class`
note: required by a bound in `reference::Reference::<C, O>::new_object`
    --> src/reference.rs:79:23
     |
79   |     pub fn new_object<CC: Class>(current_class: Rc<CC>, class_index: u16, jvm: &mut JVM) -> Result< Reference<C, O>, Error> {
     |                       ^^ required by this bound in `reference::Reference::<C, O>::new_object`
help: consider relaxing the implicit `Sized` restriction
    -->  |src/reference.rs:79:32
     |
79   |     pub fn new_object<CC: Class + ?Sized>(current_class: Rc<CC>, class_index: u16, jvm: &mut JVM) -> Result< Reference<C, O>, Error> {
     |                                 ++++++++

error[E0308]: mismatched types
    --> src/jvm/operations.rs:3660:46
     |
3660 |         frame.op_stack.push(Value::Reference(Rc::new(objectref)));
     |                             ---------------- ^^^^^^^^^^^^^^^^^^ expected enum `reference::Reference`, found struct `std::rc::Rc`
     |                             |
     |                             arguments to this enum variant are incorrect
     |
     = note: expected enum `reference::Reference<dyn class::Class, dyn reference::object::Object>`
              found struct `std::rc::Rc<reference::Reference<_, _>>`
note: tuple variant defined here
    --> src/value.rs:29:5
     |
29   |     Reference(reference::Reference<C, O>)
     |     ^^^^^^^^^

error[E0308]: mismatched types
    --> src/jvm/operations.rs:3677:41
     |
3677 |         let arrayval = Value::Reference(Rc::new(arrayref));
     |                        ---------------- ^^^^^^^^^^^^^^^^^ expected enum `reference::Reference`, found struct `std::rc::Rc`
     |                        |
     |                        arguments to this enum variant are incorrect
     |
     = note: expected enum `reference::Reference<_, _>`
              found struct `std::rc::Rc<reference::Reference<_, _>>`
note: tuple variant defined here
    --> src/value.rs:29:5
     |
29   |     Reference(reference::Reference<C, O>)
     |     ^^^^^^^^^

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<(dyn class::Class + 'static)>` in the current scope
    --> src/jvm/operations.rs:3693:49
     |
3693 |             let class_ref = frame.rt_const_pool.cp_entry(index)?.as_class()?;
     |                                                 ^^^^^^^^ method not found in `std::rc::Rc<(dyn class::Class + 'static)>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<(dyn class::Class + 'static)>` in the current scope
    --> src/jvm/operations.rs:3694:50
     |
3694 |             let class_name = frame.rt_const_pool.cp_entry(*class_ref)?.as_utf8()?;
     |                                                  ^^^^^^^^ method not found in `std::rc::Rc<(dyn class::Class + 'static)>`

error[E0308]: mismatched types
    --> src/jvm/operations.rs:3702:38
     |
3702 |         let array = Reference::Array(Array::new_ref(*count.as_int()? as usize, descriptor), Rc::new(Monitor::new()));
     |                     ---------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `std::rc::Rc`, found enum `reference::array::Array`
     |                     |
     |                     arguments to this enum variant are incorrect
     |
     = note: expected struct `std::rc::Rc<reference::array::Array<_, _>>`
                  found enum `reference::array::Array<_, _>`
note: tuple variant defined here
    --> src/reference.rs:59:5
     |
59   |     Array(Rc<Array<C, O>>, Rc<Monitor>),
     |     ^^^^^

error[E0308]: mismatched types
    --> src/jvm/operations.rs:3703:46
     |
3703 |         frame.op_stack.push(Value::Reference(Rc::new(array)));
     |                             ---------------- ^^^^^^^^^^^^^^ expected enum `reference::Reference`, found struct `std::rc::Rc`
     |                             |
     |                             arguments to this enum variant are incorrect
     |
     = note: expected enum `reference::Reference<dyn class::Class, dyn reference::object::Object>`
              found struct `std::rc::Rc<reference::Reference<_, _>>`
note: tuple variant defined here
    --> src/value.rs:29:5
     |
29   |     Reference(reference::Reference<C, O>)
     |     ^^^^^^^^^

error[E0308]: mismatched types
    --> src/jvm/operations.rs:3735:50
     |
3735 |                 Value::Reference(r) => Rc::clone(r),
     |                                        --------- ^ expected struct `std::rc::Rc`, found enum `reference::Reference`
     |                                        |
     |                                        arguments to this function are incorrect
     |
     = note: expected reference `&std::rc::Rc<_>`
                found reference `&reference::Reference<dyn class::Class, dyn reference::object::Object>`
note: associated function defined here
    --> /home/may/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/clone.rs:123:8
     |
123  |     fn clone(&self) -> Self;
     |        ^^^^^

error[E0609]: no field `m_class` on type `customobject::CustomObject<dyn class::Class>`
    --> src/jvm/operations.rs:3746:53
     |
3746 |                     let exception_class = exception.m_class.clone();
     |                                                     ^^^^^^^ help: a field with a similar name exists: `class`

error[E0308]: mismatched types
    --> src/jvm/operations.rs:3747:59
     |
3747 |                     let exception_ref = Reference::Object(exception, Rc::new(Monitor::new()));
     |                                         ----------------- ^^^^^^^^^ expected struct `std::rc::Rc`, found struct `customobject::CustomObject`
     |                                         |
     |                                         arguments to this enum variant are incorrect
     |
     = note: expected struct `std::rc::Rc<_>`
                found struct `customobject::CustomObject<dyn class::Class>`
note: tuple variant defined here
    --> src/reference.rs:61:5
     |
61   |     Object(Rc<O>, Rc<Monitor>),
     |     ^^^^^^

error[E0308]: mismatched types
    --> src/jvm/operations.rs:3749:58
     |
3749 |                     let exception_val = Value::Reference(exception_rc);
     |                                         ---------------- ^^^^^^^^^^^^ expected enum `reference::Reference`, found struct `std::rc::Rc`
     |                                         |
     |                                         arguments to this enum variant are incorrect
     |
     = note: expected enum `reference::Reference<_, _>`
              found struct `std::rc::Rc<reference::Reference<_, _>>`
note: tuple variant defined here
    --> src/value.rs:29:5
     |
29   |     Reference(reference::Reference<C, O>)
     |     ^^^^^^^^^

error[E0599]: no method named `name` found for reference `&std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3776:41
     |
3776 |                 name = format!("L{}", i.name());
     |                                         ^^^^ method not found in `&std::rc::Rc<dyn class::Class>`
     |
     = help: items from traits can only be used if the trait is implemented and in scope
note: `instructions::Instruction` defines an item `name`, perhaps you need to implement it
    --> src/jvm/instructions.rs:16:1
     |
16   | pub trait Instruction {
     | ^^^^^^^^^^^^^^^^^^^^^

error[E0609]: no field `m_class` on type `&std::rc::Rc<dyn reference::object::Object>`
    --> src/jvm/operations.rs:3780:27
     |
3780 |                 let c = o.m_class.clone();
     |                           ^^^^^^^ unknown field

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3787:38
     |
3787 |         let class_reference = *class.cp_entry(index)?.as_class()?;
     |                                      ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3788:32
     |
3788 |         let class_desc = class.cp_entry(class_reference)?.as_utf8()?.as_str();
     |                                ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `name` found for reference `&std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3811:41
     |
3811 |                 name = format!("L{}", i.name());
     |                                         ^^^^ method not found in `&std::rc::Rc<dyn class::Class>`
     |
     = help: items from traits can only be used if the trait is implemented and in scope
note: `instructions::Instruction` defines an item `name`, perhaps you need to implement it
    --> src/jvm/instructions.rs:16:1
     |
16   | pub trait Instruction {
     | ^^^^^^^^^^^^^^^^^^^^^

error[E0609]: no field `m_class` on type `&std::rc::Rc<dyn reference::object::Object>`
    --> src/jvm/operations.rs:3815:27
     |
3815 |                 let c = o.m_class.clone();
     |                           ^^^^^^^ unknown field

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3825:38
     |
3825 |         let class_reference = *class.cp_entry(index)?.as_class()?;
     |                                      ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
    --> src/jvm/operations.rs:3826:32
     |
3826 |         let class_desc = class.cp_entry(class_reference)?.as_utf8()?.as_str();
     |                                ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<(dyn class::Class + 'static)>` in the current scope
    --> src/jvm/operations.rs:3912:59
     |
3912 |         let array_class_desc_index = *frame.rt_const_pool.cp_entry(index)?.as_class()?;
     |                                                           ^^^^^^^^ method not found in `std::rc::Rc<(dyn class::Class + 'static)>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<(dyn class::Class + 'static)>` in the current scope
    --> src/jvm/operations.rs:3913:52
     |
3913 |         let array_class_desc = frame.rt_const_pool.cp_entry(array_class_desc_index)?.as_utf8()?.clone();
     |                                                    ^^^^^^^^ method not found in `std::rc::Rc<(dyn class::Class + 'static)>`

error[E0308]: mismatched types
    --> src/jvm/operations.rs:3915:42
     |
3915 |         let array_ref = Reference::Array(array, Rc::new(Monitor::new()));
     |                         ---------------- ^^^^^ expected struct `std::rc::Rc`, found enum `reference::array::Array`
     |                         |
     |                         arguments to this enum variant are incorrect
     |
     = note: expected struct `std::rc::Rc<reference::array::Array<_, _>>`
                  found enum `reference::array::Array<_, _>`
note: tuple variant defined here
    --> src/reference.rs:59:5
     |
59   |     Array(Rc<Array<C, O>>, Rc<Monitor>),
     |     ^^^^^

error[E0308]: mismatched types
    --> src/jvm/operations.rs:3916:46
     |
3916 |         let array_ref_val = Value::Reference(Rc::new(array_ref));
     |                             ---------------- ^^^^^^^^^^^^^^^^^^ expected enum `reference::Reference`, found struct `std::rc::Rc`
     |                             |
     |                             arguments to this enum variant are incorrect
     |
     = note: expected enum `reference::Reference<_, _>`
              found struct `std::rc::Rc<reference::Reference<_, _>>`
note: tuple variant defined here
    --> src/value.rs:29:5
     |
29   |     Reference(reference::Reference<C, O>)
     |     ^^^^^^^^^

error[E0308]: mismatched types
  --> src/jvm/instructions/constants.rs:35:46
   |
35 |         frame.op_stack.push(Value::Reference(Rc::new(Reference::Null)));
   |                             ---------------- ^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `reference::Reference`, found struct `std::rc::Rc`
   |                             |
   |                             arguments to this enum variant are incorrect
   |
   = note: expected enum `reference::Reference<dyn class::Class, dyn reference::object::Object>`
            found struct `std::rc::Rc<reference::Reference<_, _>>`
note: tuple variant defined here
  --> src/value.rs:29:5
   |
29 |     Reference(reference::Reference<C, O>)
   |     ^^^^^^^^^

error[E0609]: no field `m_class` on type `customobject::CustomObject<dyn class::Class>`
   --> src/jvm/instructions/constants.rs:398:49
    |
398 |             let string_class = Rc::clone(&s_obj.m_class);
    |                                                 ^^^^^^^ help: a field with a similar name exists: `class`

error[E0599]: the method `clone` exists for struct `customobject::CustomObject<dyn class::Class>`, but its trait bounds were not satisfied
   --> src/jvm/instructions/constants.rs:399:49
    |
399 |             let s_ref = Reference::Object(s_obj.clone(), Rc::new(Monitor::new()));             
    |                                                 ^^^^^ method cannot be called on `customobject::CustomObject<dyn class::Class>` due to unsatisfied trait bounds
    |
   ::: src/reference/object/customobject.rs:15:1
    |
15  | pub struct CustomObject<C: Class + ?Sized> {
    | ------------------------------------------
    | |
    | method `clone` not found for this struct
    | doesn't satisfy `_: Clone`
    |
   ::: src/class.rs:10:1
    |
10  | pub trait Class {
    | --------------- doesn't satisfy `dyn class::Class: Clone`
    |
note: trait bound `dyn class::Class: Clone` was not satisfied
   --> src/reference/object/customobject.rs:14:10
    |
14  | #[derive(Clone, PartialEq, Debug)]
    |          ^^^^^ unsatisfied trait bound introduced in this `derive` macro
    = note: the following trait bounds were not satisfied:
            `dyn class::Class: Clone`
            which is required by `customobject::CustomObject<dyn class::Class>: Clone`
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `clone`, perhaps you need to implement it:
            candidate #1: `Clone`

error[E0308]: mismatched types
   --> src/jvm/instructions/constants.rs:402:49
    |
402 |             let carray_asref = Reference::Array(carray, Rc::new(Monitor::new()));
    |                                ---------------- ^^^^^^ expected struct `std::rc::Rc`, found enum `reference::array::Array`
    |                                |
    |                                arguments to this enum variant are incorrect
    |
    = note: expected struct `std::rc::Rc<reference::array::Array<_, _>>`
                 found enum `reference::array::Array<_, _>`
note: tuple variant defined here
   --> src/reference.rs:59:5
    |
59  |     Array(Rc<Array<C, O>>, Rc<Monitor>),
    |     ^^^^^

error[E0308]: mismatched types
   --> src/jvm/instructions/constants.rs:406:50
    |
406 |             frame.op_stack.push(Value::Reference(Rc::clone(&mut s_ref_rc)));
    |                                 ---------------- ^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `reference::Reference`, found struct `std::rc::Rc`
    |                                 |
    |                                 arguments to this enum variant are incorrect
    |
    = note: expected enum `reference::Reference<dyn class::Class, dyn reference::object::Object>`
             found struct `std::rc::Rc<reference::Reference<_, _>>`
note: tuple variant defined here
   --> src/value.rs:29:5
    |
29  |     Reference(reference::Reference<C, O>)
    |     ^^^^^^^^^

error[E0308]: mismatched types
   --> src/jvm/instructions/constants.rs:407:50
    |
407 |             frame.op_stack.push(Value::Reference(s_ref_rc)); // duplicate the value, so we still have one afterwards.
    |                                 ---------------- ^^^^^^^^ expected enum `reference::Reference`, found struct `std::rc::Rc`
    |                                 |
    |                                 arguments to this enum variant are incorrect
    |
    = note: expected enum `reference::Reference<dyn class::Class, dyn reference::object::Object>`
             found struct `std::rc::Rc<reference::Reference<_, _>>`
note: tuple variant defined here
   --> src/value.rs:29:5
    |
29  |     Reference(reference::Reference<C, O>)
    |     ^^^^^^^^^

error[E0308]: mismatched types
   --> src/jvm/instructions/constants.rs:408:50
    |
408 |             frame.op_stack.push(Value::Reference(Rc::new(carray_asref)));
    |                                 ---------------- ^^^^^^^^^^^^^^^^^^^^^ expected enum `reference::Reference`, found struct `std::rc::Rc`
    |                                 |
    |                                 arguments to this enum variant are incorrect
    |
    = note: expected enum `reference::Reference<dyn class::Class, dyn reference::object::Object>`
             found struct `std::rc::Rc<reference::Reference<_, _>>`
note: tuple variant defined here
   --> src/value.rs:29:5
    |
29  |     Reference(reference::Reference<C, O>)
    |     ^^^^^^^^^

error[E0308]: mismatched types
   --> src/jvm/instructions/constants.rs:461:14
    |
461 |           else {
    |  ______________^
462 | |
463 | |         }
    | |_________^ expected enum `Result`, found `()`
    |
    = note:   expected enum `Result<LDC<F>, errorcodes::Error>`
            found unit type `()`

error[E0599]: no method named `name` found for type parameter `C` in the current scope
  --> src/jvm.rs:83:52
   |
82 |     pub fn new_with_main_class<C: Class>(c: C, flags: u8) -> Result<JVM, Error> {
   |                                - method `name` not found for this type parameter
83 |         let mut jvm = Self::new_jvm(String::from(c.name()), flags);
   |                                                    ^^^^ method not found in `C`
   |
   = help: items from traits can only be used if the type parameter is bounded by the trait
help: the following trait defines an item `name`, perhaps you need to restrict type parameter `C` with it:
   |
82 |     pub fn new_with_main_class<C: Class + instructions::Instruction>(c: C, flags: u8) -> Result<JVM, Error> {
   |                                         +++++++++++++++++++++++++++

error[E0599]: no method named `name` found for type parameter `C` in the current scope
  --> src/jvm.rs:84:35
   |
82 |     pub fn new_with_main_class<C: Class>(c: C, flags: u8) -> Result<JVM, Error> {
   |                                - method `name` not found for this type parameter
83 |         let mut jvm = Self::new_jvm(String::from(c.name()), flags);
84 |         let name = String::from(c.name());
   |                                   ^^^^ method not found in `C`
   |
   = help: items from traits can only be used if the type parameter is bounded by the trait
help: the following trait defines an item `name`, perhaps you need to restrict type parameter `C` with it:
   |
82 |     pub fn new_with_main_class<C: Class + instructions::Instruction>(c: C, flags: u8) -> Result<JVM, Error> {
   |                                         +++++++++++++++++++++++++++

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> src/jvm.rs:127:13
    |
127 |             Class::new(&buf_bytes)?
    |             ^^^^^^^^^^------------
    |                       ||
    |                       |types differ in mutability
    |                       an argument of type `class::classfile::ClassFile` is missing
    |
    = note: expected mutable reference `&mut jvm::JVM`
                       found reference `&&mut [u8]`
note: associated function defined here
   --> src/class.rs:11:8
    |
11  |     fn new(jvm: &mut JVM, file: classfile::ClassFile) -> Result<Self, Error> where Self : Sized;
    |        ^^^
help: provide the argument
    |
127 |             Class::new(/* &mut jvm::JVM */, /* class::classfile::ClassFile */)?
    |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0599]: no method named `name` found for struct `std::rc::Rc<_>` in the current scope
   --> src/jvm.rs:131:56
    |
131 |         self.m_loaded_classes.insert(String::from(c_rc.name()), Rc::clone(&c_rc)); 
    |                                                        ^^^^ method not found in `std::rc::Rc<_>`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `instructions::Instruction` defines an item `name`, perhaps you need to implement it
   --> src/jvm/instructions.rs:16:1
    |
16  | pub trait Instruction {
    | ^^^^^^^^^^^^^^^^^^^^^

error[E0277]: the size for values of type `dyn class::Class` cannot be known at compilation time
   --> src/jvm.rs:129:28
    |
129 |         let c_rc = Rc::new(c);
    |                    ------- ^ doesn't have a size known at compile-time
    |                    |
    |                    required by a bound introduced by this call
    |
    = help: the trait `Sized` is not implemented for `dyn class::Class`
note: required by a bound in `std::rc::Rc::<T>::new`
   --> /home/may/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/rc.rs:353:6
    |
353 | impl<T> Rc<T> {
    |      ^ required by this bound in `std::rc::Rc::<T>::new`

error[E0277]: the size for values of type `dyn class::Class` cannot be known at compilation time
   --> src/jvm.rs:124:13
    |
124 |         let c = unsafe {
    |             ^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `dyn class::Class`
    = note: all local variables must have a statically known size
    = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `dyn class::Class` cannot be known at compilation time
   --> src/jvm.rs:127:13
    |
127 |             Class::new(&buf_bytes)?
    |             ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `dyn class::Class`
    = note: all local variables must have a statically known size
    = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `dyn class::Class` cannot be known at compilation time
   --> src/jvm.rs:127:35
    |
127 |             Class::new(&buf_bytes)?
    |                                   ^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `dyn class::Class`
note: required by a bound in `Break`
   --> /home/may/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/control_flow.rs:83:25
    |
83  | pub enum ControlFlow<B, C = ()> {
    |                         ^^^^^^ required by this bound in `Break`

error[E0277]: the size for values of type `dyn class::Class` cannot be known at compilation time
   --> src/jvm.rs:127:13
    |
127 |             Class::new(&buf_bytes)?
    |             ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `dyn class::Class`
note: required by a bound in `Result`
   --> /home/may/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:504:17
    |
504 | pub enum Result<T, E> {
    |                 ^ required by this bound in `Result`

error[E0277]: the size for values of type `dyn class::Class` cannot be known at compilation time
   --> src/jvm.rs:127:13
    |
127 |             Class::new(&buf_bytes)?
    |             ^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `dyn class::Class`
note: required by a bound in `class::Class::new`
   --> src/class.rs:11:91
    |
11  |     fn new(jvm: &mut JVM, file: classfile::ClassFile) -> Result<Self, Error> where Self : Sized;
    |                                                                                           ^^^^^ required by this bound in `class::Class::new`

error[E0599]: no method named `cp_entry` found for reference `&std::rc::Rc<dyn class::Class>` in the current scope
   --> src/jvm.rs:245:108
    |
245 | ...}, Method class: {}", current_class.cp_entry(frame.current_method.name_index).unwrap().as_utf8().unwrap(),
    |                                        ^^^^^^^^ method not found in `&std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for reference `&std::rc::Rc<dyn class::Class>` in the current scope
   --> src/jvm.rs:246:39
    |
246 |                         current_class.cp_entry(frame.current_method.descriptor_index).unwrap().as_utf8().unwrap(), current_class.name());
    |                                       ^^^^^^^^ method not found in `&std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `name` found for reference `&std::rc::Rc<dyn class::Class>` in the current scope
   --> src/jvm.rs:246:130
    |
246 |                         current_class.cp_entry(frame.current_method.descriptor_index).unwrap().as_utf8().unwrap(), current_class.name());
    |                                                                                                                                  ^^^^ method not found in `&std::rc::Rc<dyn class::Class>`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `instructions::Instruction` defines an item `name`, perhaps you need to implement it
   --> src/jvm/instructions.rs:16:1
    |
16  | pub trait Instruction {
    | ^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `is_interface` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
   --> src/jvm.rs:562:37
    |
562 |                         match class.is_interface() {
    |                                     ^^^^^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `interfaces` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
   --> src/jvm.rs:566:63
    |
566 | ...                   for interface_index in object.interfaces() {
    |                                                     ^^^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
   --> src/jvm.rs:567:61
    |
567 | ...                   let class_index = class.cp_entry(*interface_index)?.as_class()?;
    |                                               ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
   --> src/jvm.rs:568:63
    |
568 | ...                   let ob_class_desc = class.cp_entry(*class_index)?.as_utf8()?;
    |                                                 ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `has_super` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
   --> src/jvm.rs:578:53
    |
578 | ...                   while current_class.has_super() {
    |                                           ^^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0369]: binary operation `==` cannot be applied to type `std::rc::Rc<dyn class::Class>`
   --> src/jvm.rs:579:54
    |
579 | ...                   if current_class == class {
    |                          ------------- ^^ ----- std::rc::Rc<dyn class::Class>
    |                          |
    |                          std::rc::Rc<dyn class::Class>

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
   --> src/jvm.rs:582:74
    |
582 | ...                   let super_name_index = current_class.cp_entry(current_class.super_index().unwrap())?.as_class()?;
    |                                                            ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `super_index` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
   --> src/jvm.rs:582:97
    |
582 | ...                   let super_name_index = current_class.cp_entry(current_class.super_index().unwrap())?.as_class()?;
    |                                                                                   ^^^^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
   --> src/jvm.rs:583:68
    |
583 | ...                   let super_name = current_class.cp_entry(*super_name_index)?.as_utf8()?;
    |                                                      ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `is_interface` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
   --> src/jvm.rs:598:37
    |
598 |                         match class.is_interface() {
    |                                     ^^^^^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0782]: trait objects must include the `dyn` keyword
   --> src/jvm.rs:649:33
    |
649 |                 let exception: &Object = match &*exception_rc { // This should also be ensured by the caller.
    |                                 ^^^^^^
    |
help: add `dyn` keyword before this trait
    |
649 -                 let exception: &Object = match &*exception_rc { // This should also be ensured by the caller.
649 +                 let exception: &dyn Object = match &*exception_rc { // This should also be ensured by the caller.
    |

error[E0277]: the trait bound `&std::rc::Rc<dyn reference::object::Object>: reference::object::Object` is not satisfied
   --> src/jvm.rs:649:42
    |
649 |   ...   let exception: &Object = match &*exception_rc { // This should also be ensured by the caller.
    |  ________________________________^
650 | | ...       Reference::Array(_, _) | Reference::Interface(_, _) | Reference::Null => return Err(Error::IncorrectReferenceType(Opcode::Excep...
651 | | ...       Reference::Object(o, _) => &o,
652 | | ...   };
    | |_______^ the trait `reference::object::Object` is not implemented for `&std::rc::Rc<dyn reference::object::Object>`
    |
    = help: the following other types implement trait `reference::object::Object`:
              customobject::CustomObject<C>
              natives::string::String
    = note: required for the cast from `&std::rc::Rc<dyn reference::object::Object>` to the object type `dyn reference::object::Object`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
   --> src/jvm.rs:668:77
    |
668 | ...                   let catch_class_name_index = *current_class.cp_entry(ex_handler.catch_type)?.as_class()?;
    |                                                                   ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
   --> src/jvm.rs:669:70
    |
669 | ...                   let catch_class_name = current_class.cp_entry(catch_class_name_index)?.as_utf8()?;
    |                                                            ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0609]: no field `m_class` on type `&dyn reference::object::Object`
   --> src/jvm.rs:672:65
    |
672 | ...                   let exception_class = exception.m_class.clone();
    |                                                       ^^^^^^^

error[E0599]: no method named `has_super` found for struct `std::rc::Rc<(dyn class::Class + 'static)>` in the current scope
   --> src/jvm.rs:725:33
    |
725 |             while current_class.has_super() && !found {
    |                                 ^^^^^^^^^ method not found in `std::rc::Rc<(dyn class::Class + 'static)>`

error[E0599]: no method named `methods` found for struct `std::rc::Rc<(dyn class::Class + 'static)>` in the current scope
   --> src/jvm.rs:726:45
    |
726 |                 for method in current_class.methods() {
    |                                             ^^^^^^^ method not found in `std::rc::Rc<(dyn class::Class + 'static)>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<(dyn class::Class + 'static)>` in the current scope
   --> src/jvm.rs:729:59
    |
729 |                     let method_descriptor = current_class.cp_entry(method.descriptor_index)?.as_utf8()?;
    |                                                           ^^^^^^^^ method not found in `std::rc::Rc<(dyn class::Class + 'static)>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<(dyn class::Class + 'static)>` in the current scope
   --> src/jvm.rs:733:53
    |
733 |                     let method_name = current_class.cp_entry(method.name_index)?.as_utf8()?;
    |                                                     ^^^^^^^^ method not found in `std::rc::Rc<(dyn class::Class + 'static)>`

error[E0599]: no method named `super_name` found for struct `std::rc::Rc<(dyn class::Class + 'static)>` in the current scope
   --> src/jvm.rs:742:80
    |
742 |                     current_class = self.resolve_class_reference(current_class.super_name().unwrap())?;
    |                                                                                ^^^^^^^^^^ method not found in `std::rc::Rc<(dyn class::Class + 'static)>`

error[E0599]: no method named `has_super` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
   --> src/jvm.rs:760:33
    |
760 |             while current_class.has_super() && !found {
    |                                 ^^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `methods` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
   --> src/jvm.rs:761:45
    |
761 |                 for method in current_class.methods() {
    |                                             ^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
   --> src/jvm.rs:764:59
    |
764 |                     let method_descriptor = current_class.cp_entry(method.descriptor_index)?.as_utf8()?;
    |                                                           ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
   --> src/jvm.rs:768:53
    |
768 |                     let method_name = current_class.cp_entry(method.name_index)?.as_utf8()?;
    |                                                     ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `super_name` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
   --> src/jvm.rs:777:80
    |
777 |                     current_class = self.resolve_class_reference(current_class.super_name().unwrap())?;
    |                                                                                ^^^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<(dyn class::Class + 'static)>` in the current scope
   --> src/jvm.rs:793:38
    |
793 |         let mut descriptor: &str = c.cp_entry(method.descriptor_index)?.as_utf8()?;
    |                                      ^^^^^^^^ method not found in `std::rc::Rc<(dyn class::Class + 'static)>`

error[E0308]: mismatched types
   --> src/jvm.rs:899:53
    |
899 |                     locals.push(VarValue::Reference(inner_value));
    |                                 ------------------- ^^^^^^^^^^^ expected enum `reference::Reference`, found struct `std::rc::Rc`
    |                                 |
    |                                 arguments to this enum variant are incorrect
    |
    = note: expected enum `reference::Reference<dyn class::Class, dyn reference::object::Object>`
             found struct `std::rc::Rc<reference::Reference<dyn class::Class, dyn reference::object::Object>>`
note: tuple variant defined here
   --> src/value.rs:251:5
    |
251 |     Reference(reference::Reference<C, O>),
    |     ^^^^^^^^^

error[E0599]: no method named `name` found for struct `std::rc::Rc<(dyn class::Class + 'static)>` in the current scope
   --> src/jvm.rs:914:34
    |
914 | ...                   if c.name() != self.m_main_class_name {
    |                            ^^^^ method not found in `std::rc::Rc<(dyn class::Class + 'static)>`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `instructions::Instruction` defines an item `name`, perhaps you need to implement it
   --> src/jvm/instructions.rs:16:1
    |
16  | pub trait Instruction {
    | ^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> src/jvm.rs:920:65
    |
920 | ...                   let args_ref = Reference::Array(args, Rc::new(Monitor::new()));
    |                                      ---------------- ^^^^ expected struct `std::rc::Rc`, found enum `reference::array::Array`
    |                                      |
    |                                      arguments to this enum variant are incorrect
    |
    = note: expected struct `std::rc::Rc<reference::array::Array<_, _>>`
                 found enum `reference::array::Array<_, _>`
note: tuple variant defined here
   --> src/reference.rs:59:5
    |
59  |     Array(Rc<Array<C, O>>, Rc<Monitor>),
    |     ^^^^^

error[E0308]: mismatched types
   --> src/jvm.rs:921:50
    |
921 | ...                   Value::Reference(Rc::new(args_ref))
    |                       ---------------- ^^^^^^^^^^^^^^^^^ expected enum `reference::Reference`, found struct `std::rc::Rc`
    |                       |
    |                       arguments to this enum variant are incorrect
    |
    = note: expected enum `reference::Reference<_, _>`
             found struct `std::rc::Rc<reference::Reference<_, _>>`
note: tuple variant defined here
   --> src/value.rs:29:5
    |
29  |     Reference(reference::Reference<C, O>)
    |     ^^^^^^^^^

error[E0308]: mismatched types
   --> src/jvm.rs:926:53
    |
926 |                     locals.push(VarValue::Reference(inner_value));
    |                                 ------------------- ^^^^^^^^^^^ expected enum `reference::Reference`, found struct `std::rc::Rc`
    |                                 |
    |                                 arguments to this enum variant are incorrect
    |
    = note: expected enum `reference::Reference<dyn class::Class, dyn reference::object::Object>`
             found struct `std::rc::Rc<reference::Reference<_, _>>`
note: tuple variant defined here
   --> src/value.rs:251:5
    |
251 |     Reference(reference::Reference<C, O>),
    |     ^^^^^^^^^

error[E0308]: mismatched types
   --> src/jvm.rs:939:45
    |
939 |             locals.push(VarValue::Reference(inner_ref));
    |                         ------------------- ^^^^^^^^^ expected enum `reference::Reference`, found struct `std::rc::Rc`
    |                         |
    |                         arguments to this enum variant are incorrect
    |
    = note: expected enum `reference::Reference<dyn class::Class, dyn reference::object::Object>`
             found struct `std::rc::Rc<reference::Reference<dyn class::Class, dyn reference::object::Object>>`
note: tuple variant defined here
   --> src/value.rs:251:5
    |
251 |     Reference(reference::Reference<C, O>),
    |     ^^^^^^^^^

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<(dyn class::Class + 'static)>` in the current scope
   --> src/jvm.rs:944:49
    |
944 |         println!("Invoking {}{} in class {}", c.cp_entry(method.name_index)?.as_utf8()?, descriptor, c.name());
    |                                                 ^^^^^^^^ method not found in `std::rc::Rc<(dyn class::Class + 'static)>`

error[E0599]: no method named `name` found for struct `std::rc::Rc<(dyn class::Class + 'static)>` in the current scope
   --> src/jvm.rs:944:104
    |
944 |         println!("Invoking {}{} in class {}", c.cp_entry(method.name_index)?.as_utf8()?, descriptor, c.name());
    |                                                                                                        ^^^^ method not found in `std::rc::Rc<(dyn class::Class + 'static)>`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `instructions::Instruction` defines an item `name`, perhaps you need to implement it
   --> src/jvm/instructions.rs:16:1
    |
16  | pub trait Instruction {
    | ^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `has_super` found for struct `std::rc::Rc<(dyn class::Class + 'static)>` in the current scope
   --> src/jvm.rs:951:33
    |
951 |             while current_class.has_super() && !found {
    |                                 ^^^^^^^^^ method not found in `std::rc::Rc<(dyn class::Class + 'static)>`

error[E0599]: no method named `methods` found for struct `std::rc::Rc<(dyn class::Class + 'static)>` in the current scope
   --> src/jvm.rs:952:45
    |
952 |                 for method in current_class.methods() {
    |                                             ^^^^^^^ method not found in `std::rc::Rc<(dyn class::Class + 'static)>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<(dyn class::Class + 'static)>` in the current scope
   --> src/jvm.rs:955:59
    |
955 |                     let method_descriptor = current_class.cp_entry(method.descriptor_index)?.as_utf8()?;
    |                                                           ^^^^^^^^ method not found in `std::rc::Rc<(dyn class::Class + 'static)>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<(dyn class::Class + 'static)>` in the current scope
   --> src/jvm.rs:959:53
    |
959 |                     let method_name = current_class.cp_entry(method.name_index)?.as_utf8()?;
    |                                                     ^^^^^^^^ method not found in `std::rc::Rc<(dyn class::Class + 'static)>`

error[E0599]: no method named `super_name` found for struct `std::rc::Rc<(dyn class::Class + 'static)>` in the current scope
   --> src/jvm.rs:968:80
    |
968 |                     current_class = self.resolve_class_reference(current_class.super_name().unwrap())?; 
    |                                                                                ^^^^^^^^^^ method not found in `std::rc::Rc<(dyn class::Class + 'static)>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<(dyn class::Class + 'static)>` in the current scope
   --> src/jvm.rs:981:35
    |
981 |         let mname = current_class.cp_entry(method.name_index)?.as_utf8()?;
    |                                   ^^^^^^^^ method not found in `std::rc::Rc<(dyn class::Class + 'static)>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<(dyn class::Class + 'static)>` in the current scope
   --> src/jvm.rs:982:35
    |
982 |         let mdesc = current_class.cp_entry(method.descriptor_index)?.as_utf8()?;
    |                                   ^^^^^^^^ method not found in `std::rc::Rc<(dyn class::Class + 'static)>`

error[E0599]: no method named `name` found for struct `std::rc::Rc<(dyn class::Class + 'static)>` in the current scope
   --> src/jvm.rs:983:35
    |
983 |         let cname = current_class.name();
    |                                   ^^^^ method not found in `std::rc::Rc<(dyn class::Class + 'static)>`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `instructions::Instruction` defines an item `name`, perhaps you need to implement it
   --> src/jvm/instructions.rs:16:1
    |
16  | pub trait Instruction {
    | ^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
    --> src/jvm.rs:1023:39
     |
1023 |         let loader = Value::Reference(Rc::new(Reference::Null));
     |                      ---------------- ^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `reference::Reference`, found struct `std::rc::Rc`
     |                      |
     |                      arguments to this enum variant are incorrect
     |
     = note: expected enum `reference::Reference<_, _>`
              found struct `std::rc::Rc<reference::Reference<_, _>>`
note: tuple variant defined here
    --> src/value.rs:29:5
     |
29   |     Reference(reference::Reference<C, O>)
     |     ^^^^^^^^^

error[E0308]: mismatched types
    --> src/jvm.rs:1045:54
     |
1045 |                 frame.op_stack.push(Value::Reference(Rc::new(Reference::Null)));
     |                                     ---------------- ^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `reference::Reference`, found struct `std::rc::Rc`
     |                                     |
     |                                     arguments to this enum variant are incorrect
     |
     = note: expected enum `reference::Reference<dyn class::Class, dyn reference::object::Object>`
              found struct `std::rc::Rc<reference::Reference<_, _>>`
note: tuple variant defined here
    --> src/value.rs:29:5
     |
29   |     Reference(reference::Reference<C, O>)
     |     ^^^^^^^^^

error[E0609]: no field `m_access_flags` on type `&class::classfile::ClassFile`
   --> src/class/classfile.rs:188:14
    |
188 |         self.m_access_flags
    |              ^^^^^^^^^^^^^^ help: a field with a similar name exists: `access_flags`

error[E0609]: no field `m_fields` on type `&class::classfile::ClassFile`
   --> src/class/classfile.rs:191:15
    |
191 |         &self.m_fields
    |               ^^^^^^^^ help: a field with a similar name exists: `fields`

error[E0609]: no field `m_methods` on type `&class::classfile::ClassFile`
   --> src/class/classfile.rs:194:15
    |
194 |         &self.m_methods
    |               ^^^^^^^^^ help: a field with a similar name exists: `methods`

error[E0609]: no field `m_constant_pool` on type `&class::classfile::ClassFile`
   --> src/class/classfile.rs:200:30
    |
200 |         else if index > self.m_constant_pool.len() as u16 {
    |                              ^^^^^^^^^^^^^^^ help: a field with a similar name exists: `constant_pool`

error[E0609]: no field `m_constant_pool` on type `&class::classfile::ClassFile`
   --> src/class/classfile.rs:203:18
    |
203 |         Ok(&self.m_constant_pool[(index - 1) as usize])
    |                  ^^^^^^^^^^^^^^^ help: a field with a similar name exists: `constant_pool`

error[E0609]: no field `m_constant_pool` on type `&class::classfile::ClassFile`
   --> src/class/classfile.rs:206:15
    |
206 |         &self.m_constant_pool
    |               ^^^^^^^^^^^^^^^ help: a field with a similar name exists: `constant_pool`

error[E0609]: no field `m_constant_pool` on type `&class::classfile::ClassFile`
   --> src/class/classfile.rs:209:14
    |
209 |         self.m_constant_pool.len()
    |              ^^^^^^^^^^^^^^^ help: a field with a similar name exists: `constant_pool`

error[E0609]: no field `m_interfaces` on type `&class::classfile::ClassFile`
   --> src/class/classfile.rs:212:15
    |
212 |         &self.m_interfaces
    |               ^^^^^^^^^^^^ help: a field with a similar name exists: `interfaces`

error[E0609]: no field `m_minor_version` on type `&class::classfile::ClassFile`
   --> src/class/classfile.rs:215:14
    |
215 |         self.m_minor_version
    |              ^^^^^^^^^^^^^^^ help: a field with a similar name exists: `minor_version`

error[E0609]: no field `m_major_version` on type `&class::classfile::ClassFile`
   --> src/class/classfile.rs:218:14
    |
218 |         self.m_major_version
    |              ^^^^^^^^^^^^^^^ help: a field with a similar name exists: `major_version`

error[E0609]: no field `m_this_class_index` on type `&class::classfile::ClassFile`
   --> src/class/classfile.rs:221:14
    |
221 |         self.m_this_class_index
    |              ^^^^^^^^^^^^^^^^^^ help: a field with a similar name exists: `this_class_index`

error[E0609]: no field `m_super_class_index` on type `&class::classfile::ClassFile`
   --> src/class/classfile.rs:224:20
    |
224 |         match self.m_super_class_index {
    |                    ^^^^^^^^^^^^^^^^^^^ help: a field with a similar name exists: `super_class_index`

error[E0609]: no field `m_super_class_index` on type `&class::classfile::ClassFile`
   --> src/class/classfile.rs:226:28
    |
226 |             _ => Some(self.m_super_class_index)
    |                            ^^^^^^^^^^^^^^^^^^^ help: a field with a similar name exists: `super_class_index`

error[E0609]: no field `m_this_class_index` on type `&class::classfile::ClassFile`
   --> src/class/classfile.rs:231:46
    |
231 |         &((self.cp_entry(*self.cp_entry(self.m_this_class_index).unwrap().as_class().unwrap())).unwrap().as_utf8().unwrap())
    |                                              ^^^^^^^^^^^^^^^^^^ help: a field with a similar name exists: `this_class_index`

error[E0609]: no field `m_super_class_index` on type `&class::classfile::ClassFile`
   --> src/class/classfile.rs:236:17
    |
236 |         if self.m_super_class_index != 0 {
    |                 ^^^^^^^^^^^^^^^^^^^ help: a field with a similar name exists: `super_class_index`

error[E0609]: no field `m_super_class_index` on type `&class::classfile::ClassFile`
   --> src/class/classfile.rs:237:62
    |
237 | ...entry(*self.cp_entry(self.m_super_class_index).unwrap().as_class().unwrap())).unwrap().as_utf8().unwrap()));
    |                              ^^^^^^^^^^^^^^^^^^^ help: a field with a similar name exists: `super_class_index`

error[E0609]: no field `m_super_class_index` on type `&class::classfile::ClassFile`
   --> src/class/classfile.rs:242:14
    |
242 |         self.m_super_class_index != 0
    |              ^^^^^^^^^^^^^^^^^^^ help: a field with a similar name exists: `super_class_index`

error[E0609]: no field `m_major_version` on type `&class::classfile::ClassFile`
    --> src/class/classfile.rs:1205:44
     |
1205 |         write!(f, "Version: {}.{}\n", self.m_major_version, self.m_minor_version)?;
     |                                            ^^^^^^^^^^^^^^^ help: a field with a similar name exists: `major_version`

error[E0609]: no field `m_minor_version` on type `&class::classfile::ClassFile`
    --> src/class/classfile.rs:1205:66
     |
1205 |         write!(f, "Version: {}.{}\n", self.m_major_version, self.m_minor_version)?;
     |                                                                  ^^^^^^^^^^^^^^^ help: a field with a similar name exists: `minor_version`

error[E0609]: no field `m_constant_pool` on type `&class::classfile::ClassFile`
    --> src/class/classfile.rs:1206:55
     |
1206 |         write!(f, "Size of Constant Pool: {}\n", self.m_constant_pool.len())?;
     |                                                       ^^^^^^^^^^^^^^^ help: a field with a similar name exists: `constant_pool`

error[E0609]: no field `m_constant_pool` on type `&class::classfile::ClassFile`
    --> src/class/classfile.rs:1208:28
     |
1208 |         for entry in &self.m_constant_pool {
     |                            ^^^^^^^^^^^^^^^ help: a field with a similar name exists: `constant_pool`

error[E0609]: no field `m_access_flags` on type `&class::classfile::ClassFile`
    --> src/class/classfile.rs:1211:46
     |
1211 |         write!(f, "Access flags: {}\n", self.m_access_flags)?;
     |                                              ^^^^^^^^^^^^^^ help: a field with a similar name exists: `access_flags`

error[E0609]: no field `m_this_class_index` on type `&class::classfile::ClassFile`
    --> src/class/classfile.rs:1212:50
     |
1212 |         write!(f, "This class index: {}\n", self.m_this_class_index)?;
     |                                                  ^^^^^^^^^^^^^^^^^^ help: a field with a similar name exists: `this_class_index`

error[E0609]: no field `m_this_class_index` on type `&class::classfile::ClassFile`
    --> src/class/classfile.rs:1214:45
     |
1214 |         let this_index = self.cp_entry(self.m_this_class_index).unwrap();
     |                                             ^^^^^^^^^^^^^^^^^^ help: a field with a similar name exists: `this_class_index`

error[E0609]: no field `m_super_class_index` on type `&class::classfile::ClassFile`
    --> src/class/classfile.rs:1219:55
     |
1219 |             write!(f, "Super class index: {}\n", self.m_super_class_index)?;
     |                                                       ^^^^^^^^^^^^^^^^^^^ help: a field with a similar name exists: `super_class_index`

error[E0609]: no field `m_super_class_index` on type `&class::classfile::ClassFile`
    --> src/class/classfile.rs:1221:50
     |
1221 |             let super_index = self.cp_entry(self.m_super_class_index).unwrap();
     |                                                  ^^^^^^^^^^^^^^^^^^^ help: a field with a similar name exists: `super_class_index`

error[E0609]: no field `m_interfaces` on type `&class::classfile::ClassFile`
    --> src/class/classfile.rs:1229:54
     |
1229 |         write!(f, "Number of interfaces: {}\n", self.m_interfaces.len())?;
     |                                                      ^^^^^^^^^^^^ help: a field with a similar name exists: `interfaces`

error[E0609]: no field `m_interfaces` on type `&class::classfile::ClassFile`
    --> src/class/classfile.rs:1231:32
     |
1231 |         for interface in &self.m_interfaces {
     |                                ^^^^^^^^^^^^ help: a field with a similar name exists: `interfaces`

error[E0609]: no field `m_fields` on type `&class::classfile::ClassFile`
    --> src/class/classfile.rs:1236:50
     |
1236 |         write!(f, "Number of fields: {}\n", self.m_fields.len())?;
     |                                                  ^^^^^^^^ help: a field with a similar name exists: `fields`

error[E0609]: no field `m_fields` on type `&class::classfile::ClassFile`
    --> src/class/classfile.rs:1238:28
     |
1238 |         for field in &self.m_fields {
     |                            ^^^^^^^^ help: a field with a similar name exists: `fields`

error[E0609]: no field `m_methods` on type `&class::classfile::ClassFile`
    --> src/class/classfile.rs:1241:51
     |
1241 |         write!(f, "Number of methods: {}\n", self.m_methods.len())?;
     |                                                   ^^^^^^^^^ help: a field with a similar name exists: `methods`

error[E0609]: no field `m_methods` on type `&class::classfile::ClassFile`
    --> src/class/classfile.rs:1243:29
     |
1243 |         for method in &self.m_methods {
     |                             ^^^^^^^^^ help: a field with a similar name exists: `methods`

error[E0609]: no field `m_source_file` on type `&class::classfile::ClassFile`
    --> src/class/classfile.rs:1246:34
     |
1246 |         if let Some(file) = self.m_source_file {
     |                                  ^^^^^^^^^^^^^ help: a field with a similar name exists: `source_file`

error[E0609]: no field `m_inner_classes` on type `&class::classfile::ClassFile`
    --> src/class/classfile.rs:1253:38
     |
1253 |         if let Some(classes) = &self.m_inner_classes {
     |                                      ^^^^^^^^^^^^^^^ help: a field with a similar name exists: `inner_classes`

error[E0609]: no field `m_enclosing_method` on type `&class::classfile::ClassFile`
    --> src/class/classfile.rs:1263:37
     |
1263 |         if let Some(method) = &self.m_enclosing_method {
     |                                     ^^^^^^^^^^^^^^^^^^ help: a field with a similar name exists: `enclosing_method`

error[E0609]: no field `m_source_debug_extension` on type `&class::classfile::ClassFile`
    --> src/class/classfile.rs:1269:40
     |
1269 |         if let Some(extension) = &self.m_source_debug_extension {
     |                                        ^^^^^^^^^^^^^^^^^^^^^^^^ help: a field with a similar name exists: `source_debug_extension`

error[E0609]: no field `m_bootstrap_methods` on type `&class::classfile::ClassFile`
    --> src/class/classfile.rs:1275:41
     |
1275 |         if let Some(bootstraps) = &self.m_bootstrap_methods {
     |                                         ^^^^^^^^^^^^^^^^^^^ help: a field with a similar name exists: `bootstrap_methods`

error[E0609]: no field `m_module` on type `&class::classfile::ClassFile`
    --> src/class/classfile.rs:1285:37
     |
1285 |         if let Some(module) = &self.m_module {
     |                                     ^^^^^^^^ help: a field with a similar name exists: `module`

error[E0609]: no field `m_module_packages` on type `&class::classfile::ClassFile`
    --> src/class/classfile.rs:1291:39
     |
1291 |         if let Some(packages) = &self.m_module_packages {
     |                                       ^^^^^^^^^^^^^^^^^ help: a field with a similar name exists: `module_packages`

error[E0609]: no field `m_module_main_class` on type `&class::classfile::ClassFile`
    --> src/class/classfile.rs:1301:40
     |
1301 |         if let Some(main_class) = self.m_module_main_class {
     |                                        ^^^^^^^^^^^^^^^^^^^ help: a field with a similar name exists: `module_main_class`

error[E0609]: no field `m_nest_host` on type `&class::classfile::ClassFile`
    --> src/class/classfile.rs:1308:34
     |
1308 |         if let Some(host) = self.m_nest_host {
     |                                  ^^^^^^^^^^^ help: a field with a similar name exists: `nest_host`

error[E0609]: no field `m_nest_members` on type `&class::classfile::ClassFile`
    --> src/class/classfile.rs:1314:38
     |
1314 |         if let Some(members) = &self.m_nest_members {
     |                                      ^^^^^^^^^^^^^^ help: a field with a similar name exists: `nest_members`

error[E0609]: no field `m_record` on type `&class::classfile::ClassFile`
    --> src/class/classfile.rs:1324:37
     |
1324 |         if let Some(record) = &self.m_record {
     |                                     ^^^^^^^^ help: a field with a similar name exists: `record`

error[E0609]: no field `m_permitted_subclasses` on type `&class::classfile::ClassFile`
    --> src/class/classfile.rs:1334:41
     |
1334 |         if let Some(subclasses) = &self.m_permitted_subclasses {
     |                                         ^^^^^^^^^^^^^^^^^^^^^^ help: a field with a similar name exists: `permitted_subclasses`

error[E0609]: no field `m_synthetic` on type `&class::classfile::ClassFile`
    --> src/class/classfile.rs:1344:17
     |
1344 |         if self.m_synthetic {
     |                 ^^^^^^^^^^^ help: a field with a similar name exists: `synthetic`

error[E0609]: no field `m_deprecated` on type `&class::classfile::ClassFile`
    --> src/class/classfile.rs:1347:17
     |
1347 |         if self.m_deprecated {
     |                 ^^^^^^^^^^^^ help: a field with a similar name exists: `deprecated`

error[E0609]: no field `m_signature` on type `&class::classfile::ClassFile`
    --> src/class/classfile.rs:1350:39
     |
1350 |         if let Some(signature) = self.m_signature {
     |                                       ^^^^^^^^^^^ help: a field with a similar name exists: `signature`

error[E0609]: no field `m_rt_vis_annotations` on type `&class::classfile::ClassFile`
    --> src/class/classfile.rs:1356:42
     |
1356 |         if let Some(annotations) = &self.m_rt_vis_annotations {
     |                                          ^^^^^^^^^^^^^^^^^^^^ help: a field with a similar name exists: `rt_vis_annotations`

error[E0609]: no field `m_rt_invis_annotations` on type `&class::classfile::ClassFile`
    --> src/class/classfile.rs:1366:42
     |
1366 |         if let Some(annotations) = &self.m_rt_invis_annotations {
     |                                          ^^^^^^^^^^^^^^^^^^^^^^ help: a field with a similar name exists: `rt_invis_annotations`

error[E0609]: no field `m_rt_vis_type_annotations` on type `&class::classfile::ClassFile`
    --> src/class/classfile.rs:1376:42
     |
1376 |         if let Some(annotations) = &self.m_rt_vis_type_annotations {
     |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: a field with a similar name exists: `rt_vis_type_annotations`

error[E0609]: no field `m_rt_invis_type_annotations` on type `&class::classfile::ClassFile`
    --> src/class/classfile.rs:1386:42
     |
1386 |         if let Some(annotations) = &self.m_rt_invis_type_annotations {
     |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a field with a similar name exists: `rt_invis_type_annotations`

error[E0308]: mismatched types
  --> src/class/customclass.rs:40:50
   |
40 | ...                   Value::Reference(Rc::new(Reference::Null))
   |                       ---------------- ^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `reference::Reference`, found struct `std::rc::Rc`
   |                       |
   |                       arguments to this enum variant are incorrect
   |
   = note: expected enum `reference::Reference<_, _>`
            found struct `std::rc::Rc<reference::Reference<_, _>>`
note: tuple variant defined here
  --> src/value.rs:29:5
   |
29 |     Reference(reference::Reference<C, O>)
   |     ^^^^^^^^^

error[E0308]: mismatched types
  --> src/class/customclass.rs:55:50
   |
55 | ...                   Value::Reference(Rc::new(Reference::Null))
   |                       ---------------- ^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `reference::Reference`, found struct `std::rc::Rc`
   |                       |
   |                       arguments to this enum variant are incorrect
   |
   = note: expected enum `reference::Reference<_, _>`
            found struct `std::rc::Rc<reference::Reference<_, _>>`
note: tuple variant defined here
  --> src/value.rs:29:5
   |
29 |     Reference(reference::Reference<C, O>)
   |     ^^^^^^^^^

error[E0599]: no method named `has_super` found for reference `&std::rc::Rc<dyn class::Class>` in the current scope
  --> src/class/customclass.rs:70:29
   |
70 |         while current_class.has_super() {
   |                             ^^^^^^^^^ method not found in `&std::rc::Rc<dyn class::Class>`

error[E0609]: no field `m_static_fields` on type `&std::rc::Rc<dyn class::Class>`
  --> src/class/customclass.rs:72:44
   |
72 |             if let Some(v) = current_class.m_static_fields.get(&name_and_type) {
   |                                            ^^^^^^^^^^^^^^^ unknown field

error[E0609]: no field `m_interfaces` on type `&std::rc::Rc<dyn class::Class>`
  --> src/class/customclass.rs:77:51
   |
77 |             for interface_index in &current_class.m_interfaces {
   |                                                   ^^^^^^^^^^^^ unknown field

error[E0599]: no method named `cp_entry` found for reference `&std::rc::Rc<dyn class::Class>` in the current scope
  --> src/class/customclass.rs:78:58
   |
78 |                 let interface_name_index = current_class.cp_entry(*interface_index)?.as_class()?;
   |                                                          ^^^^^^^^ method not found in `&std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for reference `&std::rc::Rc<dyn class::Class>` in the current scope
  --> src/class/customclass.rs:79:52
   |
79 |                 let interface_name = current_class.cp_entry(*interface_name_index)?.as_utf8()?;
   |                                                    ^^^^^^^^ method not found in `&std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `has_super` found for reference `&std::rc::Rc<dyn class::Class>` in the current scope
  --> src/class/customclass.rs:83:41
   |
83 |                 while current_interface.has_super() {
   |                                         ^^^^^^^^^ method not found in `&std::rc::Rc<dyn class::Class>`

error[E0609]: no field `m_static_fields` on type `&std::rc::Rc<dyn class::Class>`
  --> src/class/customclass.rs:84:56
   |
84 |                     if let Some(v) = current_interface.m_static_fields.get(&name_and_type) {
   |                                                        ^^^^^^^^^^^^^^^ unknown field

error[E0599]: no method named `super_name` found for reference `&std::rc::Rc<dyn class::Class>` in the current scope
  --> src/class/customclass.rs:87:79
   |
87 |                     interface = jvm.resolve_class_reference(current_interface.super_name().unwrap())?;
   |                                                                               ^^^^^^^^^^ method not found in `&std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `super_name` found for reference `&std::rc::Rc<dyn class::Class>` in the current scope
  --> src/class/customclass.rs:92:63
   |
92 |             class = jvm.resolve_class_reference(current_class.super_name().unwrap())?;
   |                                                               ^^^^^^^^^^ method not found in `&std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `has_super` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
   --> src/class/customclass.rs:100:29
    |
100 |         while current_class.has_super() {
    |                             ^^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0609]: no field `m_static_fields` on type `&mut dyn class::Class`
   --> src/class/customclass.rs:102:81
    |
102 |             if let Some(v) = unsafe { Rc::get_mut_unchecked(&mut current_class).m_static_fields.get_mut(&name_and_type) } {
    |                                                                                 ^^^^^^^^^^^^^^^

error[E0599]: no method named `super_name` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
   --> src/class/customclass.rs:108:71
    |
108 |             current_class = jvm.resolve_class_reference(current_class.super_name().unwrap())?;
    |                                                                       ^^^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0308]: mismatched types
   --> src/class/customclass.rs:112:109
    |
112 |     fn exec_method<C: Class>(&mut self, current_method_class: Rc<C>, jvm: &mut JVM, method: &MethodInfo) -> Result<bool, Error> {
    |        ----------- implicitly returns `()` as its body has no tail or `return` expression                   ^^^^^^^^^^^^^^^^^^^ expected enum `Result`, found `()`
    |
    = note:   expected enum `Result<bool, errorcodes::Error>`
            found unit type `()`

error[E0277]: the size for values of type `Self` cannot be known at compilation time
  --> src/class.rs:17:9
   |
17 |         self
   |         ^^^^ doesn't have a size known at compile-time
   |
   = note: required for the cast from `Self` to the object type `dyn std::any::Any`
help: consider borrowing the value, since `&Self` can be coerced into `dyn std::any::Any`
   |
17 |         &self
   |         +
help: consider further restricting `Self`
   |
16 |     fn as_any(&self) -> &dyn Any where Self: Sized {
   |                                  +++++++++++++++++

error[E0308]: mismatched types
  --> src/class.rs:27:14
   |
21 | pub fn new_class<C>(jvm: &mut JVM, file: classfile::ClassFile) -> Result<C, Error> 
   |                  - this type parameter                            ---------------- expected `Result<C, errorcodes::Error>` because of return type
...
27 |         _ => customclass::CustomClass::new(jvm, file)
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected type parameter `C`, found struct `CustomClass`
   |
   = note: expected enum `Result<C, _>`
              found enum `Result<CustomClass, _>`

error[E0277]: the trait bound `dyn class::Class: Clone` is not satisfied
   --> src/frame.rs:10:5
    |
8   | #[derive(Clone)]
    |          ----- in this derive macro expansion
9   | pub struct Frame {
10  |     pub local_variables: Vec<VarValue<dyn Class, dyn Object>>,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `dyn class::Class`
    |
note: required for `VarValue<dyn class::Class, dyn reference::object::Object>` to implement `Clone`
   --> src/value.rs:239:10
    |
239 | #[derive(Clone)]
    |          ^^^^^
    = note: 1 redundant requirement hidden
    = note: required for `Vec<VarValue<dyn class::Class, dyn reference::object::Object>>` to implement `~const Clone`
    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `dyn reference::object::Object: Clone` is not satisfied
   --> src/frame.rs:10:5
    |
8   | #[derive(Clone)]
    |          ----- in this derive macro expansion
9   | pub struct Frame {
10  |     pub local_variables: Vec<VarValue<dyn Class, dyn Object>>,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `dyn reference::object::Object`
    |
note: required for `VarValue<dyn class::Class, dyn reference::object::Object>` to implement `Clone`
   --> src/value.rs:239:10
    |
239 | #[derive(Clone)]
    |          ^^^^^
    = note: 1 redundant requirement hidden
    = note: required for `Vec<VarValue<dyn class::Class, dyn reference::object::Object>>` to implement `~const Clone`
    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `dyn class::Class: Clone` is not satisfied
  --> src/frame.rs:11:5
   |
8  | #[derive(Clone)]
   |          ----- in this derive macro expansion
...
11 |     pub op_stack: Vec<Value<dyn Class, dyn Object>>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `dyn class::Class`
   |
note: required for `value::Value<dyn class::Class, dyn reference::object::Object>` to implement `Clone`
  --> src/value.rs:19:10
   |
19 | #[derive(Clone, PartialEq)]
   |          ^^^^^
   = note: 1 redundant requirement hidden
   = note: required for `Vec<value::Value<dyn class::Class, dyn reference::object::Object>>` to implement `~const Clone`
   = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `dyn reference::object::Object: Clone` is not satisfied
  --> src/frame.rs:11:5
   |
8  | #[derive(Clone)]
   |          ----- in this derive macro expansion
...
11 |     pub op_stack: Vec<Value<dyn Class, dyn Object>>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `dyn reference::object::Object`
   |
note: required for `value::Value<dyn class::Class, dyn reference::object::Object>` to implement `Clone`
  --> src/value.rs:19:10
   |
19 | #[derive(Clone, PartialEq)]
   |          ^^^^^
   = note: 1 redundant requirement hidden
   = note: required for `Vec<value::Value<dyn class::Class, dyn reference::object::Object>>` to implement `~const Clone`
   = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0614]: type `reference::Reference<C, O>` cannot be dereferenced
  --> src/value.rs:44:24
   |
44 |                 match &**r {
   |                        ^^^

error[E0599]: no method named `name` found for struct `std::rc::Rc<_>` in the current scope
  --> src/value.rs:47:109
   |
47 |                     reference::Reference::Interface(i, _) => write!(f, "Interface Reference of class {}", i.name()),
   |                                                                                                             ^^^^ method not found in `std::rc::Rc<_>`
   |
   = help: items from traits can only be used if the trait is implemented and in scope
note: `instructions::Instruction` defines an item `name`, perhaps you need to implement it
  --> src/jvm/instructions.rs:16:1
   |
16 | pub trait Instruction {
   | ^^^^^^^^^^^^^^^^^^^^^

error[E0609]: no field `m_class` on type `std::rc::Rc<_>`
  --> src/value.rs:48:103
   |
48 |                     reference::Reference::Object(o, _) => write!(f, "Object Reference of class {}", o.m_class.name()),
   |                                                                                                       ^^^^^^^ unknown field

error[E0308]: mismatched types
   --> src/value.rs:94:23
    |
94  |             return Ok(reference.clone());
    |                    -- ^^^^^^^^^^^^^^^^^ expected struct `std::rc::Rc`, found reference
    |                    |
    |                    arguments to this enum variant are incorrect
    |
    = note: expected struct `std::rc::Rc<reference::Reference<C, O>>`
            found reference `&reference::Reference<C, O>`
note: tuple variant defined here
   --> /home/may/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:508:5
    |
508 |     Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ^^

error[E0599]: the method `clone` exists for mutable reference `&mut reference::Reference<C, O>`, but its trait bounds were not satisfied
   --> src/value.rs:131:33
    |
131 |             return Ok(reference.clone());
    |                                 ^^^^^ method cannot be called on `&mut reference::Reference<C, O>` due to unsatisfied trait bounds
    |
   ::: src/reference.rs:57:1
    |
57  | pub enum Reference<C: Class + ?Sized, O: Object + ?Sized> {
    | --------------------------------------------------------- doesn't satisfy `reference::Reference<C, O>: Clone`
    |
note: the following trait bounds were not satisfied:
      `C: Clone`
      `O: Clone`
   --> src/reference.rs:56:10
    |
56  | #[derive(Clone, Debug, PartialEq)]
    |          ^^^^^ unsatisfied trait bound introduced in this `derive` macro
    = note: the following trait bounds were not satisfied:
            `C: Clone`
            which is required by `reference::Reference<C, O>: Clone`
            `O: Clone`
            which is required by `reference::Reference<C, O>: Clone`
help: consider restricting the type parameters to satisfy the trait bounds
   --> |src/reference.rs:57:58
    |
57  | pub enum Reference<C: Class + ?Sized, O: Object + ?Sized> where C: Clone, O: Clone {
    |                                                           ++++++++++++++++++++++++

error[E0308]: mismatched types
   --> src/value.rs:150:41
    |
150 | ...   76 | 91 => Value::Reference(Rc::new(reference::Reference::Null)), // We don't care about the full type, just that it's a reference. 
    |                  ---------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `reference::Reference`, found struct `std::rc::Rc`
    |                  |
    |                  arguments to this enum variant are incorrect
    |
    = note: expected enum `reference::Reference<C, O>`
             found struct `std::rc::Rc<reference::Reference<_, _>>`
note: tuple variant defined here
   --> src/value.rs:29:5
    |
29  |     Reference(reference::Reference<C, O>)
    |     ^^^^^^^^^

error[E0308]: mismatched types
   --> src/value.rs:226:23
    |
226 |             return Ok(reference);
    |                    -- ^^^^^^^^^ expected struct `std::rc::Rc`, found enum `reference::Reference`
    |                    |
    |                    arguments to this enum variant are incorrect
    |
    = note: expected struct `std::rc::Rc<reference::Reference<_, _>>`
                 found enum `reference::Reference<_, _>`
note: tuple variant defined here
   --> /home/may/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:508:5
    |
508 |     Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ^^

error[E0308]: mismatched types
   --> src/value.rs:288:23
    |
288 |             return Ok(reference.clone());
    |                    -- ^^^^^^^^^^^^^^^^^ expected struct `std::rc::Rc`, found reference
    |                    |
    |                    arguments to this enum variant are incorrect
    |
    = note: expected struct `std::rc::Rc<reference::Reference<C, O>>`
            found reference `&reference::Reference<C, O>`
note: tuple variant defined here
   --> /home/may/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:508:5
    |
508 |     Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ^^

error[E0599]: the method `clone` exists for mutable reference `&mut reference::Reference<C, O>`, but its trait bounds were not satisfied
   --> src/value.rs:325:33
    |
325 |             return Ok(reference.clone());
    |                                 ^^^^^ method cannot be called on `&mut reference::Reference<C, O>` due to unsatisfied trait bounds
    |
   ::: src/reference.rs:57:1
    |
57  | pub enum Reference<C: Class + ?Sized, O: Object + ?Sized> {
    | --------------------------------------------------------- doesn't satisfy `reference::Reference<C, O>: Clone`
    |
note: the following trait bounds were not satisfied:
      `C: Clone`
      `O: Clone`
   --> src/reference.rs:56:10
    |
56  | #[derive(Clone, Debug, PartialEq)]
    |          ^^^^^ unsatisfied trait bound introduced in this `derive` macro
    = note: the following trait bounds were not satisfied:
            `C: Clone`
            which is required by `reference::Reference<C, O>: Clone`
            `O: Clone`
            which is required by `reference::Reference<C, O>: Clone`
help: consider restricting the type parameters to satisfy the trait bounds
   --> |src/reference.rs:57:58
    |
57  | pub enum Reference<C: Class + ?Sized, O: Object + ?Sized> where C: Clone, O: Clone {
    |                                                           ++++++++++++++++++++++++

error[E0308]: mismatched types
   --> src/value.rs:344:44
    |
344 | ... 91 => VarValue::Reference(Rc::new(reference::Reference::Null)), // We don't care about the full type, just that it's a reference. 
    |           ------------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `reference::Reference`, found struct `std::rc::Rc`
    |           |
    |           arguments to this enum variant are incorrect
    |
    = note: expected enum `reference::Reference<C, O>`
             found struct `std::rc::Rc<reference::Reference<_, _>>`
note: tuple variant defined here
   --> src/value.rs:251:5
    |
251 |     Reference(reference::Reference<C, O>),
    |     ^^^^^^^^^

error[E0614]: type `reference::Reference<C, O>` cannot be dereferenced
   --> src/value.rs:365:24
    |
365 |                 match &**r {
    |                        ^^^

error[E0599]: no method named `name` found for struct `std::rc::Rc<_>` in the current scope
   --> src/value.rs:368:109
    |
368 |                     reference::Reference::Interface(i, _) => write!(f, "Interface Reference of class {}", i.name()),
    |                                                                                                             ^^^^ method not found in `std::rc::Rc<_>`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `instructions::Instruction` defines an item `name`, perhaps you need to implement it
   --> src/jvm/instructions.rs:16:1
    |
16  | pub trait Instruction {
    | ^^^^^^^^^^^^^^^^^^^^^

error[E0609]: no field `m_class` on type `std::rc::Rc<_>`
   --> src/value.rs:369:103
    |
369 |                     reference::Reference::Object(o, _) => write!(f, "Object Reference of class {}", o.m_class.name()),
    |                                                                                                       ^^^^^^^ unknown field

error[E0308]: `?` operator has incompatible types
   --> src/reference/array.rs:176:74
    |
176 | ...new(Reference::Array(fill_multi_level(dimension + 1, dimension_cap, counts, base_type, new_desciptor)?, Rc::new(Monitor::new())))));
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `std::rc::Rc`, found enum `reference::array::Array`
    |
    = note: `?` operator cannot convert from `reference::array::Array<_, _>` to `std::rc::Rc<reference::array::Array<_, _>>`
    = note: expected struct `std::rc::Rc<reference::array::Array<_, _>>`
                 found enum `reference::array::Array<_, _>`

error[E0308]: mismatched types
   --> src/reference/array.rs:176:49
    |
176 | ...x, Value::Reference(Rc::new(Reference::Array(fill_multi_level(dimension + 1, dimension_cap, counts, base_type, new_desciptor)?, Rc::new(Monitor::new())))...
    |       ---------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `reference::Reference`, found struct `std::rc::Rc`
    |       |
    |       arguments to this enum variant are incorrect
    |
    = note: expected enum `reference::Reference<_, _>`
             found struct `std::rc::Rc<reference::Reference<_, _>>`
note: tuple variant defined here
   --> src/value.rs:29:5
    |
29  |     Reference(reference::Reference<C, O>)
    |     ^^^^^^^^^

error[E0599]: the method `clone` exists for enum `reference::Reference<C, O>`, but its trait bounds were not satisfied
   --> src/reference/array.rs:247:62
    |
247 |                 Value::Reference(Rc::new(refarray.arr[index].clone()))
    |                                                              ^^^^^ method cannot be called on `reference::Reference<C, O>` due to unsatisfied trait bounds
    |
   ::: src/reference.rs:57:1
    |
57  | pub enum Reference<C: Class + ?Sized, O: Object + ?Sized> {
    | ---------------------------------------------------------
    | |
    | method `clone` not found for this enum
    | doesn't satisfy `reference::Reference<C, O>: Clone`
    |
note: the following trait bounds were not satisfied:
      `C: Clone`
      `O: Clone`
   --> src/reference.rs:56:10
    |
56  | #[derive(Clone, Debug, PartialEq)]
    |          ^^^^^ unsatisfied trait bound introduced in this `derive` macro
    = note: the following trait bounds were not satisfied:
            `C: Clone`
            which is required by `reference::Reference<C, O>: Clone`
            `O: Clone`
            which is required by `reference::Reference<C, O>: Clone`
help: consider restricting the type parameters to satisfy the trait bounds
   --> |src/reference.rs:57:58
    |
57  | pub enum Reference<C: Class + ?Sized, O: Object + ?Sized> where C: Clone, O: Clone {
    |                                                           ++++++++++++++++++++++++

error[E0308]: mismatched types
   --> src/reference/array.rs:247:34
    |
247 |                 Value::Reference(Rc::new(refarray.arr[index].clone()))
    |                 ---------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `reference::Reference`, found struct `std::rc::Rc`
    |                 |
    |                 arguments to this enum variant are incorrect
    |
    = note: expected enum `reference::Reference<C, O>`
             found struct `std::rc::Rc<_>`
note: tuple variant defined here
   --> src/value.rs:29:5
    |
29  |     Reference(reference::Reference<C, O>)
    |     ^^^^^^^^^

error[E0599]: the method `clone` exists for mutable reference `&mut reference::Reference<C, O>`, but its trait bounds were not satisfied
   --> src/reference/array.rs:295:49
    |
295 |                 refarray.arr[index] = reference.clone();
    |                                                 ^^^^^ method cannot be called on `&mut reference::Reference<C, O>` due to unsatisfied trait bounds
    |
   ::: src/reference.rs:57:1
    |
57  | pub enum Reference<C: Class + ?Sized, O: Object + ?Sized> {
    | --------------------------------------------------------- doesn't satisfy `reference::Reference<C, O>: Clone`
    |
note: the following trait bounds were not satisfied:
      `C: Clone`
      `O: Clone`
   --> src/reference.rs:56:10
    |
56  | #[derive(Clone, Debug, PartialEq)]
    |          ^^^^^ unsatisfied trait bound introduced in this `derive` macro
    = note: the following trait bounds were not satisfied:
            `C: Clone`
            which is required by `reference::Reference<C, O>: Clone`
            `O: Clone`
            which is required by `reference::Reference<C, O>: Clone`
help: consider restricting the type parameters to satisfy the trait bounds
   --> |src/reference.rs:57:58
    |
57  | pub enum Reference<C: Class + ?Sized, O: Object + ?Sized> where C: Clone, O: Clone {
    |                                                           ++++++++++++++++++++++++

error[E0277]: the trait bound `dyn class::Class: Clone` is not satisfied
  --> src/reference/object/customobject.rs:17:5
   |
14 | #[derive(Clone, PartialEq, Debug)]
   |          ----- in this derive macro expansion
...
17 |     instance_vars: HashMap<NameAndType, Value<dyn Class, dyn Object>>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `dyn class::Class`
   |
note: required for `value::Value<dyn class::Class, dyn reference::object::Object>` to implement `Clone`
  --> src/value.rs:19:10
   |
19 | #[derive(Clone, PartialEq)]
   |          ^^^^^
   = note: 1 redundant requirement hidden
   = note: required for `HashMap<NameAndType, value::Value<dyn class::Class, dyn reference::object::Object>>` to implement `~const Clone`
   = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `dyn reference::object::Object: Clone` is not satisfied
  --> src/reference/object/customobject.rs:17:5
   |
14 | #[derive(Clone, PartialEq, Debug)]
   |          ----- in this derive macro expansion
...
17 |     instance_vars: HashMap<NameAndType, Value<dyn Class, dyn Object>>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `dyn reference::object::Object`
   |
note: required for `value::Value<dyn class::Class, dyn reference::object::Object>` to implement `Clone`
  --> src/value.rs:19:10
   |
19 | #[derive(Clone, PartialEq)]
   |          ^^^^^
   = note: 1 redundant requirement hidden
   = note: required for `HashMap<NameAndType, value::Value<dyn class::Class, dyn reference::object::Object>>` to implement `~const Clone`
   = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0369]: binary operation `==` cannot be applied to type `HashMap<NameAndType, value::Value<dyn class::Class, dyn reference::object::Object>>`
  --> src/reference/object/customobject.rs:17:5
   |
14 | #[derive(Clone, PartialEq, Debug)]
   |                 --------- in this derive macro expansion
...
17 |     instance_vars: HashMap<NameAndType, Value<dyn Class, dyn Object>>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<CC>` in the current scope
  --> src/reference/object/customobject.rs:23:47
   |
23 |         let class_info = current_method_class.cp_entry(class_index)?;
   |                                               ^^^^^^^^ method not found in `std::rc::Rc<CC>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<CC>` in the current scope
  --> src/reference/object/customobject.rs:25:41
   |
25 |         let name = current_method_class.cp_entry(name_index)?.as_utf8()?;
   |                                         ^^^^^^^^ method not found in `std::rc::Rc<CC>`

error[E0308]: mismatched types
  --> src/reference/object/customobject.rs:57:20
   |
20 | impl<C: Class + ?Sized> Object for CustomObject<C> {
   |      - this type parameter
...
57 |             class: final_class,
   |                    ^^^^^^^^^^^ expected type parameter `C`, found trait object `dyn class::Class`
   |
   = note: expected struct `std::rc::Rc<C>`
              found struct `std::rc::Rc<dyn class::Class>`
   = help: type parameters must be constrained to match other types
   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters

error[E0599]: no method named `has_super` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
  --> src/reference/object/customobject.rs:31:34
   |
31 |                 if current_class.has_super() {
   |                                  ^^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `super_name` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
  --> src/reference/object/customobject.rs:32:60
   |
32 |                     (true, Some(String::from(current_class.super_name().unwrap())))
   |                                                            ^^^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `fields` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
  --> src/reference/object/customobject.rs:42:40
   |
42 |             for field in current_class.fields() {
   |                                        ^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
  --> src/reference/object/customobject.rs:43:42
   |
43 |                 let name = current_class.cp_entry(field.name_index)?.as_utf8()?.clone();
   |                                          ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
  --> src/reference/object/customobject.rs:44:48
   |
44 |                 let descriptor = current_class.cp_entry(field.descriptor_index)?.as_utf8()?.clone();
   |                                                ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
  --> src/reference/object/customobject.rs:49:81
   |
49 |                 let _ = map.try_insert( name_and_type, Value::new(current_class.cp_entry(field.descriptor_index)?.as_utf8()?));
   |                                                                                 ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0308]: mismatched types
   --> src/reference/object/customobject.rs:101:20
    |
20  | impl<C: Class + ?Sized> Object for CustomObject<C> {
    |      - this type parameter
...
101 |             class: final_class,
    |                    ^^^^^^^^^^^ expected type parameter `C`, found trait object `dyn class::Class`
    |
    = note: expected struct `std::rc::Rc<C>`
               found struct `std::rc::Rc<dyn class::Class>`
    = help: type parameters must be constrained to match other types
    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters

error[E0599]: no method named `has_super` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
  --> src/reference/object/customobject.rs:71:34
   |
71 |                 if current_class.has_super() {
   |                                  ^^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `super_name` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
  --> src/reference/object/customobject.rs:72:60
   |
72 |                     (true, Some(String::from(current_class.super_name().unwrap())))
   |                                                            ^^^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `fields` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
  --> src/reference/object/customobject.rs:82:40
   |
82 |             for field in current_class.fields().clone() {
   |                                        ^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
  --> src/reference/object/customobject.rs:84:46
   |
84 |                     let desc = current_class.cp_entry(field.descriptor_index)?.as_utf8()?;
   |                                              ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
  --> src/reference/object/customobject.rs:87:42
   |
87 |                 let name = current_class.cp_entry(field.name_index)?.as_utf8()?.clone();
   |                                          ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<dyn class::Class>` in the current scope
  --> src/reference/object/customobject.rs:88:48
   |
88 |                 let descriptor = current_class.cp_entry(field.descriptor_index)?.as_utf8()?.clone();
   |                                                ^^^^^^^^ method not found in `std::rc::Rc<dyn class::Class>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<CC>` in the current scope
   --> src/reference/object/customobject.rs:106:46
    |
106 |         let field_ref = current_method_class.cp_entry(class_index)?.as_field_ref()?;
    |                                              ^^^^^^^^ method not found in `std::rc::Rc<CC>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<CC>` in the current scope
   --> src/reference/object/customobject.rs:108:47
    |
108 |         let class_ref = *current_method_class.cp_entry(field_ref.class_index)?.as_class()?;
    |                                               ^^^^^^^^ method not found in `std::rc::Rc<CC>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<CC>` in the current scope
   --> src/reference/object/customobject.rs:109:47
    |
109 |         let class_name = current_method_class.cp_entry(class_ref)?.as_utf8()?;
    |                                               ^^^^^^^^ method not found in `std::rc::Rc<CC>`

error[E0609]: no field `m_class` on type `&customobject::CustomObject<C>`
   --> src/reference/object/customobject.rs:110:18
    |
110 |         if *self.m_class != *jvm.resolve_class_reference(class_name)? {
    |                  ^^^^^^^ help: a field with a similar name exists: `class`

error[E0609]: no field `m_class` on type `&customobject::CustomObject<C>`
   --> src/reference/object/customobject.rs:111:76
    |
111 |             return Err(Error::IncompatibleObjectAndField(String::from(self.m_class.name()), String::from(class_name)));
    |                                                                            ^^^^^^^ help: a field with a similar name exists: `class`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<CC>` in the current scope
   --> src/reference/object/customobject.rs:113:55
    |
113 |         let name_and_type_info = current_method_class.cp_entry(field_ref.name_and_type_index)?.as_name_and_type()?;
    |                                                       ^^^^^^^^ method not found in `std::rc::Rc<CC>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<CC>` in the current scope
   --> src/reference/object/customobject.rs:114:41
    |
114 |         let name = current_method_class.cp_entry(name_and_type_info.name_index)?.as_utf8()?.clone();
    |                                         ^^^^^^^^ method not found in `std::rc::Rc<CC>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<CC>` in the current scope
   --> src/reference/object/customobject.rs:115:47
    |
115 |         let descriptor = current_method_class.cp_entry(name_and_type_info.descriptor_index)?.as_utf8()?.clone();
    |                                               ^^^^^^^^ method not found in `std::rc::Rc<CC>`

error[E0609]: no field `m_instance_vars` on type `&customobject::CustomObject<C>`
   --> src/reference/object/customobject.rs:120:20
    |
120 |         match self.m_instance_vars.get(&name_and_type) {
    |                    ^^^^^^^^^^^^^^^ help: a field with a similar name exists: `instance_vars`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<CC>` in the current scope
   --> src/reference/object/customobject.rs:132:46
    |
132 |         let field_ref = current_method_class.cp_entry(class_index)?.as_field_ref()?;
    |                                              ^^^^^^^^ method not found in `std::rc::Rc<CC>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<CC>` in the current scope
   --> src/reference/object/customobject.rs:134:47
    |
134 |         let class_ref = *current_method_class.cp_entry(field_ref.class_index)?.as_class()?;
    |                                               ^^^^^^^^ method not found in `std::rc::Rc<CC>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<CC>` in the current scope
   --> src/reference/object/customobject.rs:135:47
    |
135 |         let class_name = current_method_class.cp_entry(class_ref)?.as_utf8()?;
    |                                               ^^^^^^^^ method not found in `std::rc::Rc<CC>`

error[E0609]: no field `m_class` on type `&mut customobject::CustomObject<C>`
   --> src/reference/object/customobject.rs:136:18
    |
136 |         if *self.m_class != *jvm.resolve_class_reference(class_name)? {
    |                  ^^^^^^^ help: a field with a similar name exists: `class`

error[E0609]: no field `m_class` on type `&mut customobject::CustomObject<C>`
   --> src/reference/object/customobject.rs:137:76
    |
137 |             return Err(Error::IncompatibleObjectAndField(String::from(self.m_class.name()), String::from(class_name)));
    |                                                                            ^^^^^^^ help: a field with a similar name exists: `class`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<CC>` in the current scope
   --> src/reference/object/customobject.rs:139:55
    |
139 |         let name_and_type_info = current_method_class.cp_entry(field_ref.name_and_type_index)?.as_name_and_type()?;
    |                                                       ^^^^^^^^ method not found in `std::rc::Rc<CC>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<CC>` in the current scope
   --> src/reference/object/customobject.rs:140:41
    |
140 |         let name = current_method_class.cp_entry(name_and_type_info.name_index)?.as_utf8()?.clone();
    |                                         ^^^^^^^^ method not found in `std::rc::Rc<CC>`

error[E0599]: no method named `cp_entry` found for struct `std::rc::Rc<CC>` in the current scope
   --> src/reference/object/customobject.rs:141:47
    |
141 |         let descriptor = current_method_class.cp_entry(name_and_type_info.descriptor_index)?.as_utf8()?.clone();
    |                                               ^^^^^^^^ method not found in `std::rc::Rc<CC>`

error[E0609]: no field `m_instance_vars` on type `&mut customobject::CustomObject<C>`
   --> src/reference/object/customobject.rs:146:20
    |
146 |         match self.m_instance_vars.insert(name_and_type, value) {
    |                    ^^^^^^^^^^^^^^^ help: a field with a similar name exists: `instance_vars`

error[E0308]: mismatched types
   --> src/reference/object/customobject.rs:151:111
    |
151 |     fn exec_method<CC: Class>(&mut self, current_method_class: Rc<CC>, jvm: &mut JVM, method: &MethodInfo) -> Result<bool, Error> {
    |        ----------- implicitly returns `()` as its body has no tail or `return` expression                     ^^^^^^^^^^^^^^^^^^^ expected enum `Result`, found `()`
    |
    = note:   expected enum `Result<bool, errorcodes::Error>`
            found unit type `()`

error[E0308]: mismatched types
  --> src/reference/object/natives/integer.rs:12:40
   |
12 |         Some(Integer {i: 0, int_class: jvm.resolve_class_reference("java/lang/Integer")})
   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `std::rc::Rc`, found enum `Result`
   |
   = note: expected struct `std::rc::Rc<CustomClass>`
                found enum `Result<std::rc::Rc<(dyn class::Class + 'static)>, errorcodes::Error>`

error[E0308]: mismatched types
  --> src/reference/object/natives/integer.rs:12:9
   |
11 |     fn new<C: Class>(current_method_class: Rc<C>, class_index: u16, jvm: &mut JVM) -> Result<Self, Error> where Self: Sized {
   |                                                                                       ------------------- expected `Result<Integer, errorcodes::Error>` because of return type
12 |         Some(Integer {i: 0, int_class: jvm.resolve_class_reference("java/lang/Integer")})
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Result`, found enum `Option`
   |
   = note: expected enum `Result<Integer, errorcodes::Error>`
              found enum `Option<Integer>`

error[E0616]: field `m_threads` of struct `jvm::JVM` is private
  --> src/access_macros.rs:4:20
   |
4  |         &mut $this.m_threads[$this.m_thread_index]
   |                    ^^^^^^^^^ private field
   |
  ::: src/reference/object/natives/integer.rs:26:22
   |
26 |         let thread = access_macros::current_thread_mut!(jvm);
   |                      --------------------------------------- in this macro invocation
   |
   = note: this error originates in the macro `access_macros::current_thread_mut` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0616]: field `m_thread_index` of struct `jvm::JVM` is private
  --> src/access_macros.rs:4:36
   |
4  |         &mut $this.m_threads[$this.m_thread_index]
   |                                    ^^^^^^^^^^^^^^ private field
   |
  ::: src/reference/object/natives/integer.rs:26:22
   |
26 |         let thread = access_macros::current_thread_mut!(jvm);
   |                      --------------------------------------- in this macro invocation
   |
   = note: this error originates in the macro `access_macros::current_thread_mut` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
  --> src/reference/object/natives/integer.rs:29:14
   |
28 |         match (name, desc) {
   |               ------------ this expression has type `(&std::string::String, &std::string::String)`
29 |             ("<init>", "(I)V") => {
   |              ^^^^^^^^ expected struct `std::string::String`, found `str`
   |
   = note: expected reference `&std::string::String`
              found reference `&'static str`

error[E0308]: mismatched types
  --> src/reference/object/natives/integer.rs:29:24
   |
28 |         match (name, desc) {
   |               ------------ this expression has type `(&std::string::String, &std::string::String)`
29 |             ("<init>", "(I)V") => {
   |                        ^^^^^^ expected struct `std::string::String`, found `str`
   |
   = note: expected reference `&std::string::String`
              found reference `&'static str`

error[E0308]: mismatched types
  --> src/reference/object/natives/integer.rs:37:14
   |
28 |         match (name, desc) {
   |               ------------ this expression has type `(&std::string::String, &std::string::String)`
...
37 |             ("<init>", "(Ljava/lang/String;)V") => {
   |              ^^^^^^^^ expected struct `std::string::String`, found `str`
   |
   = note: expected reference `&std::string::String`
              found reference `&'static str`

error[E0308]: mismatched types
  --> src/reference/object/natives/integer.rs:37:24
   |
28 |         match (name, desc) {
   |               ------------ this expression has type `(&std::string::String, &std::string::String)`
...
37 |             ("<init>", "(Ljava/lang/String;)V") => {
   |                        ^^^^^^^^^^^^^^^^^^^^^^^ expected struct `std::string::String`, found `str`
   |
   = note: expected reference `&std::string::String`
              found reference `&'static str`

error[E0308]: mismatched types
  --> src/reference/object/natives/integer.rs:29:35
   |
29 |               ("<init>", "(I)V") => {
   |  ___________________________________^
30 | |                 let i = match frame.op_stack.pop() {
31 | |                     Some(Value::Int(i)) => i,
32 | |                     Some(_) => return Err(Error::UnexpectedTypeOnStack(Opcode::MethodInvoke)),
...  |
35 | |                 self.i = i;
36 | |             },
   | |_____________^ expected enum `Result`, found `()`
   |
   = note:   expected enum `Result<bool, errorcodes::Error>`
           found unit type `()`

error[E0308]: mismatched types
  --> src/reference/object/natives/integer.rs:37:52
   |
37 |               ("<init>", "(Ljava/lang/String;)V") => {
   |  ____________________________________________________^
38 | |                 let sref = match frame.op_stack.pop() {
39 | |                     Some(Value::Reference(r)) => r,
40 | |                     Some(_) => return Err(Error::UnexpectedTypeOnStack(Opcode::MethodInvoke)),
...  |
51 | |                 // do some things with the string.
52 | |             },
   | |_____________^ expected enum `Result`, found `()`
   |
   = note:   expected enum `Result<bool, errorcodes::Error>`
           found unit type `()`

error[E0308]: mismatched types
  --> src/reference/object/natives/integer.rs:56:9
   |
55 |     fn class<C: Class>(&self) -> Rc<C> {
   |              -                   ----- expected `std::rc::Rc<C>` because of return type
   |              |
   |              this type parameter
56 |         self.int_class.clone()
   |         ^^^^^^^^^^^^^^^^^^^^^^ expected type parameter `C`, found struct `CustomClass`
   |
   = note: expected struct `std::rc::Rc<C>`
              found struct `std::rc::Rc<CustomClass>`

error[E0308]: mismatched types
   --> src/reference/object/natives/string.rs:12:36
    |
12  |         Ok(String {s: String::from(""), s_class: jvm.resolve_class_reference("java/lang/String")})
    |                       ------------ ^^ expected struct `natives::string::String`, found `&str`
    |                       |
    |                       arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/may/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:376:8
    |
376 |     fn from(_: T) -> Self;
    |        ^^^^

error[E0308]: mismatched types
  --> src/reference/object/natives/string.rs:12:23
   |
12 |         Ok(String {s: String::from(""), s_class: jvm.resolve_class_reference("java/lang/String")})
   |                       ^^^^^^^^^^^^^^^^ expected struct `std::string::String`, found struct `natives::string::String`

error[E0308]: mismatched types
  --> src/reference/object/natives/string.rs:12:50
   |
12 |         Ok(String {s: String::from(""), s_class: jvm.resolve_class_reference("java/lang/String")})
   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `std::rc::Rc`, found enum `Result`
   |
   = note: expected struct `std::rc::Rc<CustomClass>`
                found enum `Result<std::rc::Rc<(dyn class::Class + 'static)>, errorcodes::Error>`

error[E0616]: field `m_threads` of struct `jvm::JVM` is private
  --> src/access_macros.rs:4:20
   |
4  |         &mut $this.m_threads[$this.m_thread_index]
   |                    ^^^^^^^^^ private field
   |
  ::: src/reference/object/natives/string.rs:26:22
   |
26 |         let thread = access_macros::current_thread_mut!(jvm);
   |                      --------------------------------------- in this macro invocation
   |
   = note: this error originates in the macro `access_macros::current_thread_mut` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0616]: field `m_thread_index` of struct `jvm::JVM` is private
  --> src/access_macros.rs:4:36
   |
4  |         &mut $this.m_threads[$this.m_thread_index]
   |                                    ^^^^^^^^^^^^^^ private field
   |
  ::: src/reference/object/natives/string.rs:26:22
   |
26 |         let thread = access_macros::current_thread_mut!(jvm);
   |                      --------------------------------------- in this macro invocation
   |
   = note: this error originates in the macro `access_macros::current_thread_mut` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> src/reference/object/natives/string.rs:46:12
    |
46  |         Ok(())
    |         -- ^^ expected `bool`, found `()`
    |         |
    |         arguments to this enum variant are incorrect
    |
note: tuple variant defined here
   --> /home/may/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:508:5
    |
508 |     Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ^^

error[E0308]: mismatched types
  --> src/reference/object/natives/string.rs:49:9
   |
48 |     fn class<C: Class>(&self) -> Rc<C> {
   |              -                   ----- expected `std::rc::Rc<C>` because of return type
   |              |
   |              this type parameter
49 |         self.s_class.clone()
   |         ^^^^^^^^^^^^^^^^^^^^ expected type parameter `C`, found struct `CustomClass`
   |
   = note: expected struct `std::rc::Rc<C>`
              found struct `std::rc::Rc<CustomClass>`

error[E0283]: type annotations needed
  --> src/reference/object.rs:17:18
   |
17 |             _ => customobject::CustomObject::new_with_name(name, jvm)
   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `C` declared on the struct `CustomObject`
   |
   = note: cannot satisfy `_: class::Class`
note: required by a bound in `customobject::CustomObject`
  --> src/reference/object/customobject.rs:15:28
   |
15 | pub struct CustomObject<C: Class + ?Sized> {
   |                            ^^^^^ required by this bound in `customobject::CustomObject`
help: consider specifying the type argument in the function call
   |
17 |             _ => customobject::CustomObject::<C>::new_with_name(name, jvm)
   |                                            +++++

error[E0277]: the size for values of type `Self` cannot be known at compilation time
  --> src/reference/object.rs:30:9
   |
30 |         self
   |         ^^^^ doesn't have a size known at compile-time
   |
   = note: required for the cast from `Self` to the object type `dyn std::any::Any`
help: consider borrowing the value, since `&Self` can be coerced into `dyn std::any::Any`
   |
30 |         &self
   |         +
help: consider further restricting `Self`
   |
29 |     fn as_any(&self) -> &dyn Any where Self: Sized {
   |                                  +++++++++++++++++

warning: unused import: `Class`
 --> src/jvm/operations.rs:5:20
  |
5 | use crate::class::{Class, self};
  |                    ^^^^^

Some errors have detailed explanations: E0049, E0053, E0061, E0277, E0283, E0308, E0369, E0425, E0599...
For more information about an error, try `rustc --explain E0049`.
warning: `rust-jvm` (lib) generated 28 warnings
error: could not compile `rust-jvm` due to 397 previous errors; 28 warnings emitted
